// utils/whisperHallucinationDetector.js
import { logger } from './logger.js';

/**
 * üéØ –î–ï–¢–ï–ö–¢–û–† –ì–ê–õ–õ–Æ–¶–ò–ù–ê–¶–ò–ô WHISPER
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å YouTube-—Ñ—Ä–∞–∑–∞–º–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∏—à–∏–Ω—ã
 */
export class WhisperHallucinationDetector {
  constructor() {
    // üîç –ü–ê–¢–¢–ï–†–ù–´ –ü–û–ü–£–õ–Ø–†–ù–´–• –ì–ê–õ–õ–Æ–¶–ò–ù–ê–¶–ò–ô
    this.HALLUCINATION_PATTERNS = [
      // YouTube —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã
      /–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç/i,
      /—Å—É–±—Ç–∏—Ç—Ä—ã –¥–µ–ª–∞–ª/i,
      /–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å/i,
      /–ª–∞–π–∫/i,
      /–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏/i,
      /—Å–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä/i,
      /–Ω–µ –∑–∞–±—É–¥—å—Ç–µ/i,
      /–∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫/i,
      /—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è/i,
      /—Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—É–±—Ç–∏—Ç—Ä–æ–≤/i,
      /–∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä/i,
      /–∞\.—Å–µ–º–∫–∏–Ω/i,
      /–∞\.–µ–≥–æ—Ä–æ–≤–∞/i,

      // –¢–∏–ø–∏—á–Ω—ã–µ –∫–æ–Ω—Ü–æ–≤–∫–∏ –≤–∏–¥–µ–æ
      /–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è/i,
      /—É–≤–∏–¥–∏–º—Å—è/i,
      /–¥–æ –≤—Å—Ç—Ä–µ—á–∏/i,
      /–≤—Å–µ–º –ø–æ–∫–∞/i,

      // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã
      /–Ω–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏/i,
      /–∫–æ–Ω–µ—Ü –∑–∞–ø–∏—Å–∏/i,
      /—Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å/i,
      /–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–≤—É–∫–∞/i,

      // –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ/–º–µ–¥–∏–∞ —Ñ—Ä–∞–∑—ã
      /–º—É–∑—ã–∫–∞ –∏–≥—Ä–∞–µ—Ç/i,
      /–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è/i,
      /–º–µ–ª–æ–¥–∏—è/i,
      /—Å–∞—É–Ω–¥—Ç—Ä–µ–∫/i,

      // –°—Ç—Ä–∞–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
      /(.)\1{4,}/i, // 4+ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ –ø–æ–¥—Ä—è–¥
      /^[–∞-—è—ë\s]{1,3}$/i, // –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã
    ];

    // üéµ –ú–£–ó–´–ö–ê–õ–¨–ù–´–ï/–ú–ï–î–ò–ê –ò–ù–î–ò–ö–ê–¢–û–†–´
    this.MEDIA_INDICATORS = [
      /\[–º—É–∑—ã–∫–∞\]/i,
      /\[–∞–ø–ª–æ–¥–∏—Å–º–µ–Ω—Ç—ã\]/i,
      /\[—Å–º–µ—Ö\]/i,
      /\[–∑–≤—É–∫\]/i,
      /‚ô™/,
      /‚ô´/,
      /üéµ/,
      /üé∂/,
    ];

    // üìä –ü–û–†–û–ì–û–í–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø
    this.THRESHOLDS = {
      MIN_AUDIO_DENSITY: 5, // KB/—Å–µ–∫ –º–∏–Ω–∏–º—É–º –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ—á–∏
      MAX_SILENT_DURATION: 15, // —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º –¥–ª—è "—Ç–∏—à–∏–Ω—ã"
      MIN_MEANINGFUL_LENGTH: 5, // —Å–∏–º–≤–æ–ª–æ–≤ –º–∏–Ω–∏–º—É–º –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
      MAX_REPEAT_RATIO: 0.7, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤
    };

    // üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    this.stats = {
      totalProcessed: 0,
      hallucinationsDetected: 0,
      silenceDetected: 0,
      realSpeechDetected: 0,
    };

    logger.info('üéØ WhisperHallucinationDetector initialized');
  }

  /**
   * üîç –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê
   * @param {string} transcription - —Ç–µ–∫—Å—Ç –æ—Ç Whisper
   * @param {number} audioSize - —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ –≤ –±–∞–π—Ç–∞—Ö
   * @param {number} duration - –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
   * @returns {Object} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
   */
  analyzeTranscription(transcription, audioSize, duration) {
    this.stats.totalProcessed++;

    const analysis = {
      isHallucination: false,
      isSilence: false,
      isRealSpeech: false,
      confidence: 0,
      reasons: [],
      recommendation: 'process',
      metrics: {},
    };

    // üìè –ë–ê–ó–û–í–´–ï –ú–ï–¢–†–ò–ö–ò
    const audioSizeKB = audioSize / 1024;
    const audioDensity = audioSizeKB / duration;
    const textLength = transcription.trim().length;
    const wordCount = transcription
      .trim()
      .split(/\s+/)
      .filter((w) => w.length > 0).length;

    analysis.metrics = {
      audioSizeKB: Math.round(audioSizeKB * 10) / 10,
      duration,
      audioDensity: Math.round(audioDensity * 10) / 10,
      textLength,
      wordCount,
      avgWordLength: wordCount > 0 ? textLength / wordCount : 0,
    };

    // üîç –ü–†–û–í–ï–†–ö–ê 1: –ü–ê–¢–¢–ï–†–ù–´ –ì–ê–õ–õ–Æ–¶–ò–ù–ê–¶–ò–ô
    const hallucinationMatch = this.detectHallucinationPatterns(transcription);
    if (hallucinationMatch) {
      analysis.isHallucination = true;
      analysis.confidence = 0.95;
      analysis.reasons.push(
        `Detected hallucination pattern: "${hallucinationMatch}"`
      );
      analysis.recommendation = 'treat_as_silence';
      this.stats.hallucinationsDetected++;
    }

    // üîç –ü–†–û–í–ï–†–ö–ê 2: –ü–õ–û–¢–ù–û–°–¢–¨ –ê–£–î–ò–û
    const silenceAnalysis = this.analyzeSilence(
      audioDensity,
      duration,
      textLength
    );
    if (silenceAnalysis.isSilence) {
      analysis.isSilence = true;
      analysis.confidence = Math.max(
        analysis.confidence,
        silenceAnalysis.confidence
      );
      analysis.reasons.push(...silenceAnalysis.reasons);
      analysis.recommendation = 'treat_as_silence';
      this.stats.silenceDetected++;
    }

    // üîç –ü–†–û–í–ï–†–ö–ê 3: –ö–ê–ß–ï–°–¢–í–û –¢–ï–ö–°–¢–ê
    const textQuality = this.analyzeTextQuality(transcription);
    if (textQuality.isSuspicious) {
      analysis.isHallucination = true;
      analysis.confidence = Math.max(
        analysis.confidence,
        textQuality.confidence
      );
      analysis.reasons.push(...textQuality.reasons);
      analysis.recommendation = 'treat_as_silence';
    }

    // ‚úÖ –ü–†–û–í–ï–†–ö–ê 4: –†–ï–ê–õ–¨–ù–ê–Ø –†–ï–ß–¨
    if (!analysis.isHallucination && !analysis.isSilence) {
      const realSpeechAnalysis = this.validateRealSpeech(
        transcription,
        audioDensity,
        duration
      );
      if (realSpeechAnalysis.isReal) {
        analysis.isRealSpeech = true;
        analysis.confidence = realSpeechAnalysis.confidence;
        analysis.reasons.push(...realSpeechAnalysis.reasons);
        analysis.recommendation = 'process_normally';
        this.stats.realSpeechDetected++;
      }
    }

    // üìä –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê
    this.logAnalysisResult(transcription, analysis);

    return analysis;
  }

  /**
   * üé≠ –î–ï–¢–ï–ö–¶–ò–Ø –ü–ê–¢–¢–ï–†–ù–û–í –ì–ê–õ–õ–Æ–¶–ò–ù–ê–¶–ò–ô
   */
  detectHallucinationPatterns(text) {
    const normalizedText = text.toLowerCase().trim();

    for (const pattern of this.HALLUCINATION_PATTERNS) {
      const match = normalizedText.match(pattern);
      if (match) {
        return match[0];
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    for (const pattern of this.MEDIA_INDICATORS) {
      const match = text.match(pattern);
      if (match) {
        return match[0];
      }
    }

    return null;
  }

  /**
   * üîá –ê–ù–ê–õ–ò–ó –¢–ò–®–ò–ù–´
   */
  analyzeSilence(audioDensity, duration, textLength) {
    const analysis = {
      isSilence: false,
      confidence: 0,
      reasons: [],
    };

    // –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
    if (audioDensity < this.THRESHOLDS.MIN_AUDIO_DENSITY) {
      analysis.isSilence = true;
      analysis.confidence += 0.4;
      analysis.reasons.push(
        `Low audio density: ${audioDensity} KB/s (threshold: ${this.THRESHOLDS.MIN_AUDIO_DENSITY})`
      );
    }

    // –î–ª–∏–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
    if (duration > 8 && textLength < 20) {
      analysis.isSilence = true;
      analysis.confidence += 0.3;
      analysis.reasons.push(
        `Long audio (${duration}s) with short text (${textLength} chars)`
      );
    }

    // –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è "—Ç–∏—à–∏–Ω–∞"
    if (duration > this.THRESHOLDS.MAX_SILENT_DURATION) {
      analysis.confidence += 0.2;
      analysis.reasons.push(`Very long recording: ${duration}s`);
    }

    // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä/—Ç–µ–∫—Å—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ
    const sizeToTextRatio = (audioDensity * duration) / Math.max(textLength, 1);
    if (sizeToTextRatio > 15) {
      analysis.isSilence = true;
      analysis.confidence += 0.2;
      analysis.reasons.push(
        `High size-to-text ratio: ${Math.round(sizeToTextRatio)}`
      );
    }

    return analysis;
  }

  /**
   * ‚úèÔ∏è –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –¢–ï–ö–°–¢–ê
   */
  analyzeTextQuality(text) {
    const analysis = {
      isSuspicious: false,
      confidence: 0,
      reasons: [],
    };

    const trimmedText = text.trim();
    const length = trimmedText.length;

    // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
    if (length < this.THRESHOLDS.MIN_MEANINGFUL_LENGTH) {
      analysis.isSuspicious = true;
      analysis.confidence += 0.3;
      analysis.reasons.push(`Text too short: ${length} chars`);
    }

    // –ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤
    const repeatRatio = this.calculateRepeatRatio(trimmedText);
    if (repeatRatio > this.THRESHOLDS.MAX_REPEAT_RATIO) {
      analysis.isSuspicious = true;
      analysis.confidence += 0.4;
      analysis.reasons.push(
        `High repeat ratio: ${Math.round(repeatRatio * 100)}%`
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (this.containsNonsenseSequences(trimmedText)) {
      analysis.isSuspicious = true;
      analysis.confidence += 0.3;
      analysis.reasons.push('Contains nonsense sequences');
    }

    // –¢–æ–ª—å–∫–æ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏–ª–∏ —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª—ã
    if (/^[^\w\u0400-\u04FF]+$/.test(trimmedText)) {
      analysis.isSuspicious = true;
      analysis.confidence += 0.5;
      analysis.reasons.push('Only punctuation or special characters');
    }

    return analysis;
  }

  /**
   * ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ê–õ–¨–ù–û–ô –†–ï–ß–ò
   */
  validateRealSpeech(text, audioDensity, duration) {
    const analysis = {
      isReal: false,
      confidence: 0,
      reasons: [],
    };

    const trimmedText = text.trim();
    const wordCount = trimmedText
      .split(/\s+/)
      .filter((w) => w.length > 0).length;

    // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
    if (audioDensity >= this.THRESHOLDS.MIN_AUDIO_DENSITY) {
      analysis.confidence += 0.3;
      analysis.reasons.push(`Good audio density: ${audioDensity} KB/s`);
    }

    // –ê–¥–µ–∫–≤–∞—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–ª–æ–≤ –∫ –≤—Ä–µ–º–µ–Ω–∏
    const wordsPerSecond = wordCount / duration;
    if (wordsPerSecond >= 0.5 && wordsPerSecond <= 4) {
      analysis.confidence += 0.3;
      analysis.reasons.push(
        `Natural speech rate: ${Math.round(wordsPerSecond * 10) / 10} words/s`
      );
    }

    // –°–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞
    if (this.containsMeaningfulRussianWords(trimmedText)) {
      analysis.confidence += 0.2;
      analysis.reasons.push('Contains meaningful Russian words');
    }

    // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
    if (trimmedText.length >= 10 && trimmedText.length <= 200) {
      analysis.confidence += 0.2;
      analysis.reasons.push(`Normal text length: ${trimmedText.length} chars`);
    }

    analysis.isReal = analysis.confidence >= 0.6;

    return analysis;
  }

  /**
   * üî¢ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
   */
  calculateRepeatRatio(text) {
    if (text.length < 3) return 0;

    const charCount = {};
    for (const char of text.toLowerCase()) {
      charCount[char] = (charCount[char] || 0) + 1;
    }

    const maxRepeats = Math.max(...Object.values(charCount));
    return maxRepeats / text.length;
  }

  containsNonsenseSequences(text) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const repeatingPatterns = [
      /(.{2,})\1{2,}/i, // –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      /^[–∞–µ–∏–æ—É—ã—ç—é—è\s]+$/i, // —Ç–æ–ª—å–∫–æ –≥–ª–∞—Å–Ω—ã–µ
      /^[–±–≤–≥–¥–∂–∑–π–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—Ö—Ü—á—à—â\s]+$/i, // —Ç–æ–ª—å–∫–æ —Å–æ–≥–ª–∞—Å–Ω—ã–µ
    ];

    return repeatingPatterns.some((pattern) => pattern.test(text));
  }

  containsMeaningfulRussianWords(text) {
    // –ë–∞–∑–æ–≤—ã–µ —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Ä–µ—á—å
    const meaningfulWords = [
      '–Ω–µ—Ç',
      '–¥–∞',
      '–Ω–µ',
      '—Ö–æ—á—É',
      '–±—É–¥—É',
      '–º–æ–≥—É',
      '–¥–µ–Ω—å–≥–∏',
      '—Ä—É–±–ª',
      '–ø–ª–∞—Ç–∏—Ç—å',
      '–¥–æ–≥–æ–≤–æ—Ä',
      '–±–∞–Ω–∫',
      '–¥–æ–ª–≥',
      '–∫—Ä–µ–¥–∏—Ç',
      '—Å—É–º–º–∞',
      '–æ–ø–ª–∞—Ç–∞',
      '–∑–≤–æ–Ω–æ–∫',
      '–ø–æ–Ω–∏–º–∞—é',
      '—Å–ª—ã—à—É',
      '–≥–æ–≤–æ—Ä—é',
      '–∑–Ω–∞—é',
      '–¥—É–º–∞—é',
      '—Ä–∞–±–æ—Ç–∞—é',
      '–≤—Ä–µ–º—è',
      '–¥–µ–Ω—å',
      '–Ω–µ–¥–µ–ª—è',
      '–º–µ—Å—è—Ü',
      '–≥–æ–¥',
      '—Å–µ–≥–æ–¥–Ω—è',
      '–∑–∞–≤—Ç—Ä–∞',
    ];

    const lowerText = text.toLowerCase();
    return meaningfulWords.some((word) => lowerText.includes(word));
  }

  /**
   * üìä –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
   */
  logAnalysisResult(transcription, analysis) {
    const emoji = analysis.isHallucination
      ? 'üé≠'
      : analysis.isSilence
        ? 'üîá'
        : analysis.isRealSpeech
          ? 'üó£Ô∏è'
          : '‚ùì';

    logger.info(`${emoji} Whisper Analysis Result:`, {
      text:
        transcription.substring(0, 50) +
        (transcription.length > 50 ? '...' : ''),
      isHallucination: analysis.isHallucination,
      isSilence: analysis.isSilence,
      isRealSpeech: analysis.isRealSpeech,
      confidence: Math.round(analysis.confidence * 100) + '%',
      recommendation: analysis.recommendation,
      metrics: analysis.metrics,
      reasons: analysis.reasons,
    });
  }

  /**
   * üìà –ü–û–õ–£–ß–ò–¢–¨ –°–¢–ê–¢–ò–°–¢–ò–ö–£
   */
  getStats() {
    const total = this.stats.totalProcessed;
    return {
      ...this.stats,
      hallucinationRate:
        total > 0
          ? Math.round((this.stats.hallucinationsDetected / total) * 100)
          : 0,
      silenceRate:
        total > 0 ? Math.round((this.stats.silenceDetected / total) * 100) : 0,
      realSpeechRate:
        total > 0
          ? Math.round((this.stats.realSpeechDetected / total) * 100)
          : 0,
    };
  }

  /**
   * üîÑ –°–ë–†–û–° –°–¢–ê–¢–ò–°–¢–ò–ö–ò
   */
  resetStats() {
    this.stats = {
      totalProcessed: 0,
      hallucinationsDetected: 0,
      silenceDetected: 0,
      realSpeechDetected: 0,
    };
    logger.info('üìä Whisper hallucination detector stats reset');
  }

  /**
   * üéØ –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ pipeline)
   */
  quickCheck(transcription, audioSize, duration) {
    const analysis = this.analyzeTranscription(
      transcription,
      audioSize,
      duration
    );

    return {
      shouldProcess: analysis.isRealSpeech,
      treatAsSilence: analysis.isHallucination || analysis.isSilence,
      confidence: analysis.confidence,
      reason: analysis.reasons[0] || 'Unknown',
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const whisperDetector = new WhisperHallucinationDetector();
