// –î–æ–±–∞–≤—å —ç—Ç–æ—Ç –∫–ª–∞—Å—Å –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª utils/conversationLogger.js

import fs from 'fs/promises';
import path from 'path';

export class ConversationLogger {
  constructor() {
    this.conversationDir = './logs/conversations';
    this.ensureConversationDir();
  }

  async ensureConversationDir() {
    try {
      await fs.mkdir(this.conversationDir, { recursive: true });
    } catch (error) {
      console.error('Failed to create conversation logs directory:', error);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é —Ä–µ–ø–ª–∏–∫—É –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
   */
  async logConversationTurn(callId, speaker, text, metadata = {}) {
    const timestamp = new Date();
    const logEntry = {
      callId,
      speaker, // 'USER' –∏–ª–∏ 'AI'
      text,
      timestamp: timestamp.toISOString(),
      localTime: timestamp.toLocaleString('ru-RU'),
      metadata,
    };

    // –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    const speakerIcon = speaker === 'USER' ? 'üó£Ô∏èüë§' : 'ü§ñüí¨';
    const speakerLabel = speaker === 'USER' ? '–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨' : 'AI –ê–°–°–ò–°–¢–ï–ù–¢';

    console.log('\n' + '='.repeat(80));
    console.log(`${speakerIcon} ${speakerLabel} (${callId})`);
    console.log(`üïê ${timestamp.toLocaleString('ru-RU')}`);
    console.log(`üí¨ "${text}"`);

    if (metadata.classification) {
      console.log(`üè∑Ô∏è  –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: ${metadata.classification}`);
    }

    if (metadata.duration) {
      console.log(`‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: ${metadata.duration}s`);
    }

    if (metadata.audioSize) {
      console.log(
        `üìÅ –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ: ${(metadata.audioSize / 1024).toFixed(1)} KB`
      );
    }

    console.log('='.repeat(80));

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    await this.saveToFile(callId, logEntry);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ –≤ —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
   */
  async saveToFile(callId, logEntry) {
    try {
      const date = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
      const filename = `${date}_${callId}.jsonl`;
      const filepath = path.join(this.conversationDir, filename);

      const logLine = JSON.stringify(logEntry) + '\n';
      await fs.appendFile(filepath, logLine);
    } catch (error) {
      console.error('Failed to save conversation log:', error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   */
  async logConversationSummary(callId, conversation, result) {
    const summary = {
      callId,
      timestamp: new Date().toISOString(),
      totalTurns: conversation.length,
      userMessages: conversation.filter((msg) => msg.role === 'user').length,
      aiMessages: conversation.filter((msg) => msg.role === 'assistant').length,
      finalResult: result,
      conversation: conversation.map((msg) => ({
        role: msg.role,
        content:
          msg.content.substring(0, 100) +
          (msg.content.length > 100 ? '...' : ''),
        timestamp: msg.timestamp,
      })),
    };

    console.log('\n' + 'üìä'.repeat(20));
    console.log(`üìã –°–í–û–î–ö–ê –†–ê–ó–ì–û–í–û–†–ê (${callId})`);
    console.log(`üë• –í—Å–µ–≥–æ —Ä–µ–ø–ª–∏–∫: ${summary.totalTurns}`);
    console.log(`üó£Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${summary.userMessages} —Ä–µ–ø–ª–∏–∫`);
    console.log(`ü§ñ AI: ${summary.aiMessages} —Ä–µ–ø–ª–∏–∫`);
    console.log(`üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`);
    console.log('üìä'.repeat(20));

    await this.saveToFile(callId, { type: 'SUMMARY', ...summary });
  }
}

// –í outboundManager.js –¥–æ–±–∞–≤—å:
import { ConversationLogger } from '../utils/conversationLogger.js';

// –í –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ:
this.conversationLogger = new ConversationLogger();

// –í processAudioBuffer –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:
await this.conversationLogger.logConversationTurn(
  callId,
  'USER',
  transcription,
  {
    classification,
    duration: recordingDuration,
    audioSize: audioBuffer.length,
    transcriptionTime,
  }
);

// –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –æ—Ç–≤–µ—Ç–∞:
await this.conversationLogger.logConversationTurn(
  callId,
  'AI',
  aiResponse.text,
  {
    classification,
    nextStage: aiResponse.nextStage,
  }
);

// –í –∫–æ–Ω—Ü–µ –∑–≤–æ–Ω–∫–∞ (–≤ endCall –º–µ—Ç–æ–¥–µ):
await this.conversationLogger.logConversationSummary(
  callId,
  callData.conversation,
  result
);
