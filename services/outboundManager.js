import { CallSession } from './callSession.js';
import { AIServices } from './aiServices.js';
import { responseGenerator } from './responseGenerator.js';
import { DebtCollectionScripts } from '../scripts/debtCollection.js';
import { ttsManager } from './ttsManager.js';
import { audioManager } from './audioManager.js';
import { Call } from '../models/Call.js';
import { Client } from '../models/Client.js';
import { logger } from '../utils/logger.js';
import { CONFIG } from '../config/index.js';

// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Twilio –∫–æ–Ω—Ñ–∏–≥
import { twilioClient, TWILIO_CONFIG } from '../config/twilio.js';

import axios from 'axios';

export class OutboundManager {
  constructor() {
    this.activeCalls = new Map(); // callId -> callData
    this.pendingAudio = new Map(); // callId -> audioData
    this.recordingProcessing = new Map(); // callId -> boolean
    this.classificationTracker = new Map(); // callId -> { classification -> count }
    this.gptFailureCounter = new Map(); // callId -> failureCount
    this.conversationStages = new Map(); // callId -> stage info –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π twilioClient
    this.twilioClient = twilioClient;

    logger.info('üèóÔ∏è OutboundCallManager initialized');
  }

  /**
   *  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–¥–∏—è–º–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   */
  setConversationStage(callId, stage, audioInfo = null) {
    const stageData = {
      stage: stage,
      timestamp: Date.now(),
      audioInfo: audioInfo,
      lastTwiMLRequest: null,
    };

    this.conversationStages.set(callId, stageData);
    logger.info(`üé≠ Stage changed for ${callId}: ${stage}`);
  }

  getConversationStage(callId) {
    return this.conversationStages.get(callId);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
   */
  async initiateCall(clientId) {
    try {
      // üîç –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
      logger.info('üîç Twilio Configuration Debug:', {
        TWILIO_PHONE_NUMBER: TWILIO_CONFIG.phoneNumber
          ? TWILIO_CONFIG.phoneNumber
          : 'UNDEFINED',
        SERVER_URL: TWILIO_CONFIG.serverUrl || CONFIG.SERVER_URL,
        TIMEOUT: TWILIO_CONFIG.timeout,
      });

      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ TWILIO_CONFIG
      if (!TWILIO_CONFIG.phoneNumber) {
        throw new Error(
          'TWILIO_PHONE_NUMBER is missing in TWILIO_CONFIG - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª!'
        );
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
      const client = await Client.findById(clientId);
      if (!client) {
        throw new Error(`Client not found: ${clientId}`);
      }

      const callId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

      logger.info(
        `üìû Starting call initiation for client: ${clientId} (${client.name})`
      );

      // –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –∑–≤–æ–Ω–∫–∞
      const session = new CallSession(callId, {
        name: client.name,
        phone: client.phone,
        amount: client.debt_amount,
        contract: client.contract_number,
        company: client.company || '–§–∏–Ω–∞–Ω—Å-–°–µ—Ä–≤–∏—Å',
      });

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞
      const callData = {
        callId,
        twilioSid: null,
        status: 'initiating',
        clientId,
        session,
        conversation: [],
        currentStage: 'start',
        startTime: Date.now(),
        recordingCount: 0,
        lastActivity: Date.now(),
        // üîß –î–û–ë–ê–í–õ–Ø–ï–ú: –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–µ—Ä–≤—ã–º —Ñ–∞–π–ª–æ–º
        twilioCallSid: null,
        phone: client.phone,
        greetingJobId: null,
        processingRecording: false,
      };

      this.activeCalls.set(callId, callData);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π
      this.classificationTracker.set(callId, {});
      this.gptFailureCounter.set(callId, 0);

      // –ü—Ä–µ–¥–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
      await this.preGenerateGreeting(callId);

      // –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –ë–î
      await this.createCallRecord(callId, client);

      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const baseUrl =
        TWILIO_CONFIG.serverUrl ||
        CONFIG.SERVER_URL ||
        `http://localhost:${CONFIG.PORT || 3000}`;

      const callParams = {
        to: client.phone,
        from: TWILIO_CONFIG.phoneNumber, // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º TWILIO_CONFIG
        url: `${baseUrl}/api/webhooks/twiml`,
        statusCallback: `${baseUrl}/api/webhooks/status/${callId}`,
        statusCallbackEvent: ['initiated', 'ringing', 'answered', 'completed'],
        method: 'POST',
        record: false,
        timeout: TWILIO_CONFIG.timeout || 30,
      };

      logger.info('üîç Call parameters before Twilio API call:', {
        to: callParams.to,
        from: callParams.from,
        fromType: typeof callParams.from,
        fromLength: callParams.from ? callParams.from.length : 0,
        url: callParams.url,
        statusCallback: callParams.statusCallback,
      });

      // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ Twilio
      const call = await this.twilioClient.calls.create(callParams);

      callData.twilioSid = call.sid;
      callData.twilioCallSid = call.sid; // üîß –î–û–ë–ê–í–õ–Ø–ï–ú: –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

      logger.info(`‚úÖ Call initiated: ${callId} -> Twilio SID: ${call.sid}`);
      logger.info('üìû TwiML URL will be handled by Console settings');

      return {
        success: true,
        callId,
        twilioSid: call.sid,
        twilioCallSid: call.sid, // üîß –î–û–ë–ê–í–õ–Ø–ï–ú: –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        clientName: client.name,
        phone: client.phone,
        status: 'initiated',
      };
    } catch (error) {
      logger.error('‚ùå Call initiation failed:', error);
      logger.error('‚ùå Error details:', {
        message: error.message,
        code: error.code,
        status: error.status,
      });
      throw error;
    }
  }

  /**
   * Get active call data
   */
  getActiveCall(callId) {
    return this.activeCalls.get(callId);
  }

  /**
   * Generate TwiML response for Twilio webhook (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–µ—Ä–≤—ã–º —Ñ–∞–π–ª–æ–º)
   */
  async generateTwiMLResponse(callId, context = 'initial') {
    return this.generateTwiML(callId, context);
  }

  /**
   * Generate error TwiML (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–µ—Ä–≤—ã–º —Ñ–∞–π–ª–æ–º)
   */
  generateErrorTwiML() {
    logger.warn(`‚ö†Ô∏è Generating error TwiML`);
    return `<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Say voice="Polly.Maxim" language="ru-RU">–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è.</Say>
    <Hangup/>
</Response>`;
  }

  /**
   * Get all active calls summary (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–µ—Ä–≤—ã–º —Ñ–∞–π–ª–æ–º)
   */
  getAllActiveCalls() {
    return Array.from(this.activeCalls.entries()).map(([callId, data]) => ({
      callId,
      clientId: data.clientId,
      phone: data.phone,
      status: data.status,
      currentStage: data.currentStage,
      startTime: new Date(data.startTime),
      duration: Date.now() - data.startTime,
      hasAudio: this.pendingAudio.has(callId),
      twilioCallSid: data.twilioCallSid || data.twilioSid,
    }));
  }

  /**
   * Get call metrics and statistics (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–µ—Ä–≤—ã–º —Ñ–∞–π–ª–æ–º)
   */
  getCallMetrics() {
    const activeCalls = this.getAllActiveCalls();
    const byStatus = activeCalls.reduce((acc, call) => {
      acc[call.status] = (acc[call.status] || 0) + 1;
      return acc;
    }, {});

    return {
      total: activeCalls.length,
      byStatus,
      pendingAudio: this.pendingAudio.size,
      longestCall:
        activeCalls.length > 0
          ? Math.max(...activeCalls.map((call) => call.duration))
          : 0,
    };
  }

  /**
   * Handle TTS completion and store audio data (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–µ—Ä–≤—ã–º —Ñ–∞–π–ª–æ–º)
   */
  handleTTSCompleted(callId, audioData) {
    logger.info(`üéØ TTS COMPLETED for call ${callId}:`, {
      source: audioData.source,
      hasAudioUrl: !!audioData.audioUrl,
      hasAudioBuffer: !!audioData.audioBuffer,
      twilioTTS: audioData.twilioTTS,
      type: audioData.type,
      voiceId: audioData.voiceId,
    });

    // Store audio data for webhook
    this.pendingAudio.set(callId, {
      ...audioData,
      timestamp: Date.now(),
      consumed: false,
    });

    logger.info(
      `‚úÖ TTS completed for call ${callId}, audio ready: ${audioData.source}`
    );

    // Notify when greeting is ready
    if (
      audioData.type === 'greeting' &&
      this.activeCalls.get(callId)?.status === 'calling'
    ) {
      logger.info(
        `üéâ Greeting ready for call ${callId} - ${audioData.source} audio prepared!`
      );
    }
  }

  /**
   * Check if TTS is still in progress for a call (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–µ—Ä–≤—ã–º —Ñ–∞–π–ª–æ–º)
   */
  checkTTSInProgress(callId) {
    const callData = this.activeCalls.get(callId);
    if (!callData) return false;

    // Check if greeting job exists but audio is not ready yet
    return callData.greetingJobId && !this.pendingAudio.has(callId);
  }

  /**
   * –ü—Ä–µ–¥–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
   */
  async preGenerateGreeting(callId) {
    try {
      const callData = this.activeCalls.get(callId);
      if (!callData) return;

      const greetingScript = DebtCollectionScripts.getScript(
        'start',
        'positive',
        callData.session.clientData
      );

      logger.info(`Greeting pre-generated for call: ${callId}`);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TTS –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
      await this.generateResponseTTS(
        callId,
        greetingScript.text,
        'urgent',
        'greeting'
      );

      logger.info(`üéâ Greeting ready for call ${callId} - audio prepared!`);
    } catch (error) {
      logger.error(`Error pre-generating greeting for ${callId}:`, error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–∞ –≤ –ë–î
   */
  async createCallRecord(callId, client) {
    try {
      const callRecord = new Call({
        call_id: callId,
        client_id: client._id,
        client_name: client.name,
        client_phone: client.phone,
        debt_amount: client.debt_amount,
        status: 'initiated',
        start_time: new Date(),
        conversation: [],
        current_stage: 'start',
      });

      await callRecord.save();
      logger.info(
        `‚úÖ Call record created in DB: ${callId} for client: ${client._id}`
      );
    } catch (error) {
      logger.error(`‚ùå Failed to create call record for ${callId}:`, error);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TTS –¥–ª—è –æ—Ç–≤–µ—Ç–∞
   */
  async generateResponseTTS(
    callId,
    text,
    priority = 'normal',
    type = 'response'
  ) {
    try {
      logger.info(
        `Generating ${type} TTS for call ${callId}: ${text.substring(0, 50)}...`
      );

      const result = await ttsManager.synthesizeSpeech(text, {
        priority,
        voiceId: CONFIG.ELEVENLABS_VOICE_ID,
        useCache: type === 'greeting' || priority === 'urgent',
      });

      if (result.audioBuffer || result.audioUrl) {
        let audioUrl = result.audioUrl;

        // –ï—Å–ª–∏ –µ—Å—Ç—å buffer, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
        if (result.audioBuffer && !audioUrl) {
          const audioFile = await audioManager.saveAudioFile(
            callId,
            result.audioBuffer,
            type
          );
          audioUrl = audioFile.publicUrl;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ
        this.pendingAudio.set(callId, {
          audioUrl,
          audioBuffer: result.audioBuffer,
          source: result.source,
          type,
          timestamp: Date.now(),
          consumed: false,
        });

        logger.info(`Audio saved for call ${callId} (${type}): ${audioUrl}`);
        return { success: true, audioUrl, source: result.source };
      }

      throw new Error('No audio generated');
    } catch (error) {
      logger.error(`‚ùå TTS generation failed for call ${callId}:`, error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   */
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   */
  async processRecording(callId, recordingUrl, recordingDuration) {
    const callData = this.activeCalls.get(callId);
    if (!callData) {
      logger.error(
        `Cannot process recording: call data not found for ${callId}`
      );
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
    if (this.recordingProcessing.has(callId)) {
      logger.warn(`Recording already being processed for call: ${callId}`);
      return null;
    }

    this.recordingProcessing.set(callId, true);
    logger.info(`üé§ Marked recording as processing for call: ${callId}`);

    try {
      logger.info(
        `üß† Starting AI processing for call: ${callId} (attempt 1/3)`
      );
      logger.info(
        `üé§ Processing recording for call ${callId}: ${recordingUrl}`
      );

      // –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
      const audioBuffer = await this.downloadRecording(recordingUrl);
      if (!audioBuffer || audioBuffer.length === 0) {
        throw new Error('Failed to download or empty audio buffer');
      }

      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      let audioPath = null;
      try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if (
          audioManager.saveRecordingForDebug &&
          typeof audioManager.saveRecordingForDebug === 'function'
        ) {
          audioPath = await audioManager.saveRecordingForDebug(
            callId,
            audioBuffer,
            recordingDuration
          );
        } else {
          // –§–æ–ª–±—ç–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
          const audioFile = await audioManager.saveAudioFile(
            callId,
            audioBuffer,
            'recording'
          );
          audioPath = audioFile.filepath;
        }
        logger.info(`üíæ Audio saved for debug: ${audioPath}`);
      } catch (saveError) {
        logger.warn(`‚ö†Ô∏è Failed to save audio for debug: ${saveError.message}`);
        audioPath = null; // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
      }

      // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
      const transcriptionStart = Date.now();
      const transcriptionResult = await AIServices.transcribeAudio(audioBuffer);
      const transcriptionTime = Date.now() - transcriptionStart;

      const transcription = transcriptionResult.text?.trim() || '';

      logger.info(`üéØ TRANSCRIPTION RESULT for call ${callId}:`, {
        text: transcription,
        audioSize: `${(audioBuffer.length / 1024).toFixed(1)} KB`,
        duration: `${recordingDuration}s`,
        transcriptionTime: `${transcriptionTime}ms`,
        charCount: transcription.length,
        wordCount: transcription.split(' ').filter((w) => w.length > 0).length,
        timestamp: new Date().toISOString(),
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
      if (!transcription || transcription.length < 3) {
        logger.warn(`‚ö†Ô∏è Empty or too short transcription for call ${callId}`);
        return this.handleEmptyTranscription(callId);
      }

      // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      logger.info(
        `üîç Classifying response for call ${callId}: "${transcription.substring(0, 50)}..."`
      );

      const classificationResult = await AIServices.classifyResponse(
        transcription,
        callData.currentStage,
        callData.conversation.map((c) => c.content)
      );

      const classification = classificationResult?.classification || 'neutral';

      logger.info(`üìä Classification result for call ${callId}:`, {
        text: transcription,
        classification,
        confidence: classificationResult?.confidence || 'unknown',
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫–µ—Ä –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
      const repeatCount = this.updateClassificationTracker(
        callId,
        classification
      );

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
      const responseContext = {
        callId,
        clientMessage: transcription,
        classification,
        conversationHistory: callData.conversation.map((c) => c.content),
        clientData: callData.session.clientData,
        currentStage: callData.currentStage,
        repeatCount,
      };

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
      logger.info(
        `üéØ Generating response for call ${callId} using advanced logic:`,
        {
          classification,
          repeatCount,
          currentStage: callData.currentStage,
        }
      );

      const responseResult =
        await this.generateAdvancedResponse(responseContext);

      logger.info(`ü§ñ AI –æ—Ç–≤–µ—Ç–∏–ª: "${responseResult.text}"`);

      logger.info(`ü§ñ AI RESPONSE for call ${callId}:`, {
        userInput: transcription,
        classification,
        nextStage: responseResult.nextStage,
        timestamp: new Date().toISOString(),
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
      callData.conversation.push({
        role: 'user',
        content: transcription,
        timestamp: new Date(),
        duration: recordingDuration,
        classification,
        audioInfo: {
          size: audioBuffer.length,
          path: audioPath,
          transcriptionTime,
        },
      });

      callData.conversation.push({
        role: 'assistant',
        content: responseResult.text,
        timestamp: new Date(),
        classification,
        nextStage: responseResult.nextStage,
        generationMethod: responseResult.method,
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ç–∞–ø —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
      callData.currentStage = responseResult.nextStage;

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TTS –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω)
      if (responseResult.text && responseResult.nextStage !== 'completed') {
        logger.info(
          `üé§ Generating TTS for AI response: "${responseResult.text.substring(0, 30)}..."`
        );
        await this.generateResponseTTS(callId, responseResult.text, 'normal');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await Call.findOneAndUpdate(
        { call_id: callId },
        {
          $push: {
            conversation: {
              user_message: transcription,
              ai_response: responseResult.text,
              classification,
              generation_method: responseResult.method,
              repeat_count: repeatCount,
              timestamp: new Date(),
              metadata: {
                audio_size: audioBuffer.length,
                audio_duration: recordingDuration,
                transcription_time: transcriptionTime,
                audio_path: audioPath, // –ú–æ–∂–µ—Ç –±—ã—Ç—å null - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
              },
            },
          },
          current_stage: responseResult.nextStage,
          last_transcription: transcription,
          last_classification: classification,
          response_generation_metrics: responseResult.metrics,
        }
      );

      logger.info(
        `‚úÖ Recording processed for call: ${callId} - ${classification}`
      );
      logger.info(`üîÑ Continuing conversation for call: ${callId}`);

      return {
        transcription,
        classification,
        response: responseResult.text,
        nextStage: responseResult.nextStage,
        method: responseResult.method,
        repeatCount,
      };
    } catch (error) {
      logger.error(`‚ùå Audio processing failed for call ${callId}:`, {
        error: error.message,
        stack: error.stack,
        audioSize: audioBuffer?.length || 'unknown', // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω ?.
        duration: recordingDuration,
        errorType: error.constructor.name,
      });
      return this.handleRecordingError(callId, error);
    } finally {
      // üî• –í–°–ï–ì–î–ê —É–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤ finally –±–ª–æ–∫–µ
      this.recordingProcessing.delete(callId);
      logger.info(`‚úÖ Removed processing marker for call: ${callId}`);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
   */
  async generateAdvancedResponse(responseContext) {
    const { callId } = responseContext;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á GPT –¥–ª—è —ç—Ç–æ–≥–æ –∑–≤–æ–Ω–∫–∞
      const gptFailures = this.gptFailureCounter.get(callId) || 0;

      if (gptFailures >= CONFIG.MAX_GPT_FAILURES_BEFORE_FALLBACK) {
        logger.warn(
          `‚ö†Ô∏è Too many GPT failures for call ${callId}, forcing script mode`
        );
        return this.generateScriptResponse(responseContext);
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å responseGenerator
      const response =
        await responseGenerator.generateResponse(responseContext);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
      this.gptFailureCounter.set(callId, 0);

      return response;
    } catch (error) {
      logger.error(
        `‚ùå Advanced response generation failed for call ${callId}:`,
        error
      );

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
      const currentFailures = this.gptFailureCounter.get(callId) || 0;
      this.gptFailureCounter.set(callId, currentFailures + 1);

      // –§–æ–ª–±—ç–∫ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
      return this.generateScriptResponse(responseContext);
    }
  }

  /**
   * –§–æ–ª–±—ç–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç—ã
   */
  generateScriptResponse(responseContext) {
    const { classification, currentStage, clientData, repeatCount } =
      responseContext;

    logger.info(
      `üìú Using script fallback for classification: ${classification}`
    );

    // –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    const responseVariants = DebtCollectionScripts.getResponseVariants(
      currentStage,
      classification,
      clientData
    );

    // –í—ã–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    const variantIndex = Math.min(repeatCount, responseVariants.length - 1);
    const selectedResponse =
      responseVariants[variantIndex] || responseVariants[0];

    return {
      text: selectedResponse.text,
      nextStage: selectedResponse.nextStage,
      method: 'script',
      isValid: true,
    };
  }

  /**
   * –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π
   */
  updateClassificationTracker(callId, classification) {
    if (!this.classificationTracker.has(callId)) {
      this.classificationTracker.set(callId, {});
    }

    const callTracker = this.classificationTracker.get(callId);
    const currentCount = callTracker[classification] || 0;
    const newCount = currentCount + 1;

    callTracker[classification] = newCount;

    logger.info(`üìä Classification tracking for call ${callId}:`, {
      classification,
      count: newCount,
      allClassifications: callTracker,
    });

    return newCount - 1; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
  }

  /**
   * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
   */
  async downloadRecording(recordingUrl) {
    try {
      const maxRetries = 3;
      let lastError;

      for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
          if (attempt > 1) {
            logger.warn(
              `‚è∞ Recording not ready yet, waiting 3 more seconds...`
            );
            await new Promise((resolve) => setTimeout(resolve, 3000));
          }

          const response = await axios.get(recordingUrl, {
            responseType: 'arraybuffer',
            headers: {
              'User-Agent': 'DebtCollection-AI/1.0',
            },
            timeout: 30000,
            auth: {
              username: process.env.TWILIO_ACCOUNT_SID,
              password: process.env.TWILIO_AUTH_TOKEN,
            },
          });

          if (response.data && response.data.byteLength > 1000) {
            const message =
              attempt > 1
                ? `‚úÖ Recording downloaded on retry: ${response.data.byteLength} bytes`
                : `‚úÖ Recording downloaded: ${response.data.byteLength} bytes`;
            logger.info(message);

            return Buffer.from(response.data);
          }

          throw new Error(
            `Recording too small: ${response.data?.byteLength || 0} bytes`
          );
        } catch (error) {
          lastError = error;
          if (attempt === maxRetries) {
            throw error;
          }
          logger.warn(
            `‚ö†Ô∏è Download attempt ${attempt} failed: ${error.message}`
          );
        }
      }

      throw lastError;
    } catch (error) {
      logger.error('‚ùå Failed to download recording:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
   */
  handleEmptyTranscription(callId) {
    logger.warn(
      `‚ö†Ô∏è Empty transcription for call ${callId}, prompting for repeat`
    );

    const promptResponse = '–Ø –≤–∞—Å –Ω–µ —Å–ª—ã—à—É. –ì–æ–≤–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≥—Ä–æ–º—á–µ.';

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TTS –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    this.generateResponseTTS(callId, promptResponse, 'urgent');

    return {
      transcription: '[EMPTY TRANSCRIPTION]',
      classification: 'unclear',
      response: promptResponse,
      nextStage: 'listening',
      method: 'fallback',
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–ø–∏—Å–∏
   */
  handleRecordingError(callId, error) {
    logger.warn(
      `‚ö†Ô∏è Using enhanced fallback for call ${callId} due to error:`,
      error.message
    );

    const fallbackResponse =
      '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª. –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?';

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TTS –¥–ª—è —Ñ–æ–ª–±—ç–∫–∞
    this.generateResponseTTS(callId, fallbackResponse, 'urgent');

    return {
      transcription: '[ERROR: Could not process audio]',
      classification: 'unclear',
      response: fallbackResponse,
      nextStage: 'listening',
      method: 'fallback',
      error: true,
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TwiML –æ—Ç–≤–µ—Ç–∞
   */
  generateTwiML(callId, context = 'initial') {
    const callData = this.activeCalls.get(callId);
    if (!callData) {
      logger.error(`Call data not found for TwiML generation: ${callId}`);
      return this.generateErrorTwiML(); // ‚úÖ –≠–¢–û –£–ñ–ï –ï–°–¢–¨!
    }

    // üéØ –ü–û–õ–£–ß–ê–ï–ú –¢–ï–ö–£–©–£–Æ –°–¢–ê–î–ò–Æ
    const stageData = this.getConversationStage(callId);
    const currentStage = stageData?.stage || 'start';

    logger.info(`üé≠ TwiML for ${callId}, stage: ${currentStage}`);

    // üéØ –ü–†–û–í–ï–†–Ø–ï–ú –°–¢–ê–î–ò–Æ –û–ñ–ò–î–ê–ù–ò–Ø
    if (currentStage === 'greeting_sent' || currentStage === 'response_sent') {
      const timeSinceStage = Date.now() - stageData.timestamp;

      // –ï—Å–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ - –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º
      if (timeSinceStage < 30000) {
        // 30 —Å–µ–∫—É–Ω–¥
        logger.info(
          `‚è≥ Still waiting for response on ${callId} (${Math.round(timeSinceStage / 1000)}s)`
        );

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π Record –±–µ–∑ –∞—É–¥–∏–æ
        return `<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Record 
        action="${TWILIO_CONFIG.serverUrl}/api/webhooks/recording/${callId}"
        method="POST"
        maxLength="60"
        playBeep="false"
        timeout="5"
        finishOnKey="#"
        trim="trim-silence"
        recordingStatusCallback="${TWILIO_CONFIG.serverUrl}/api/webhooks/recording-status/${callId}"
    />
</Response>`;
      }
    }

    // üéØ –û–ë–´–ß–ù–ê–Ø –õ–û–ì–ò–ö–ê (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è)
    logger.info(`üéØ Generating TwiML for call: ${callId}, context: ${context}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ
    const audioData = this.pendingAudio.get(callId);
    if (audioData && !audioData.consumed) {
      logger.info(`üéµ Using ready audio for call: ${callId}`);

      // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ
      audioData.consumed = true;
      this.pendingAudio.set(callId, audioData);

      // üéØ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –°–¢–ê–î–ò–Æ
      if (currentStage === 'start') {
        this.setConversationStage(callId, 'greeting_sent', {
          audioUrl: audioData.audioUrl,
          source: audioData.source,
        });
      } else {
        this.setConversationStage(callId, 'response_sent', {
          audioUrl: audioData.audioUrl,
          source: audioData.source,
        });
      }

      if (audioData.audioUrl) {
        logger.info(`üéµ Sending ElevenLabs PLAY TwiML for call: ${callId}`);
        logger.info(`üéµ Audio URL: ${audioData.audioUrl}`);
        return this.generatePlayTwiML(callId, audioData.audioUrl); // ‚úÖ –≠–¢–û –£–ñ–ï –ï–°–¢–¨!
      }
    }

    // üéØ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô FALLBACK (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
    const script = DebtCollectionScripts.getScript(
      callData.currentStage || 'start',
      'positive',
      callData.session.clientData
    );

    logger.warn(`‚ö†Ô∏è No audio ready for call: ${callId}, using fallback TTS`);

    // üéØ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –°–¢–ê–î–ò–Æ –î–õ–Ø FALLBACK
    if (currentStage === 'start') {
      this.setConversationStage(callId, 'greeting_sent', {
        source: 'twilio_fallback',
      });
    }

    return this.generateSayTwiML(callId, script.text, 'Polly.Maxim'); // ‚úÖ –ò–∑–º–µ–Ω–∏–ª–∏ –≥–æ–ª–æ—Å –Ω–∞ –º—É–∂—Å–∫–æ–π
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Play TwiML –¥–ª—è ElevenLabs
   */
  generatePlayTwiML(callId, audioUrl) {
    logger.info(`üéµ Generating Play TwiML for ElevenLabs audio: ${audioUrl}`);
    logger.info(`üéµ Sending PLAY TwiML (ElevenLabs) for call: ${callId}`);
    logger.info(`üéµ Audio URL: ${audioUrl}`);

    const twiml = `<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Play>${audioUrl}</Play>
<Record 
    action="${TWILIO_CONFIG.serverUrl}/api/webhooks/recording/${callId}"
    method="POST"
    maxLength="60"       
    playBeep="false"
    timeout="3"          
    finishOnKey="#"
    trim="trim-silence"  
    recordingStatusCallback="${TWILIO_CONFIG.serverUrl}/api/webhooks/recording-status/${callId}"
/>
</Response>`;

    logger.info(`üìã Full TwiML response for call ${callId}:`);
    logger.info(twiml);

    return twiml;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Say TwiML –¥–ª—è —Ñ–æ–ª–±—ç–∫–∞
   */
  generateSayTwiML(callId, text, voice = 'Polly.Maxim') {
    logger.warn(`üîä Generating Say TwiML fallback with voice: ${voice}`);

    const twiml = `<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Say voice="${voice}" language="ru-RU">${text}</Say>
    <Record 
        action="${TWILIO_CONFIG.serverUrl}/api/webhooks/recording/${callId}"
        method="POST"
        maxLength="60"
        playBeep="false"
        timeout="3"
        trim="trim-silence"  
        finishOnKey="#"
        recordingStatusCallback="${TWILIO_CONFIG.serverUrl}/api/webhooks/recording-status/${callId}"
    />
</Response>`;

    return twiml;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫
   */
  async handleCallAnswered(callId) {
    const callData = this.activeCalls.get(callId);
    if (!callData) {
      logger.error(`Call answered but data not found: ${callId}`);
      return { ready: false };
    }

    callData.status = 'answered';

    await Call.findOneAndUpdate(
      { call_id: callId },
      {
        status: 'answered',
        answer_time: new Date(),
      }
    );

    logger.info(`üìû Call answered: ${callId}`);

    const audioData = this.pendingAudio.get(callId);
    if (audioData) {
      logger.info(
        `üéµ Greeting audio ready for call ${callId}: ${audioData.source}`
      );
      return { ready: true, audioType: audioData.source };
    }

    const script = DebtCollectionScripts.getScript(
      'start',
      'positive',
      callData.session.clientData
    );

    logger.warn(
      `‚ö†Ô∏è No greeting audio ready for call ${callId}, using fallback script`
    );
    return { ready: false, script: script.text };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
   */
  async updateCallStatus(callId, status, data = {}) {
    const callData = this.activeCalls.get(callId);
    if (callData) {
      callData.status = status;
      callData.lastActivity = Date.now();
    }

    try {
      const updateData = { status, [`${status}_time`]: new Date(), ...data };
      await Call.findOneAndUpdate({ call_id: callId }, updateData);

      logger.info(`üìû Call ${status}: ${callId}`);
    } catch (error) {
      logger.error(`‚ùå Failed to update call status for ${callId}:`, error);
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
   */
  async endCall(callId, result = 'completed', error = null) {
    const callData = this.activeCalls.get(callId);
    if (!callData) {
      logger.warn(`Call data not found for ending call: ${callId}`);
      return;
    }

    const duration = Date.now() - callData.startTime;

    logger.info(
      `üìû Ending call: ${callId}, result: ${result}, duration: ${duration}ms`
    );

    // –û—á–∏—â–∞–µ–º —Ç—Ä–µ–∫–µ—Ä—ã
    this.cleanupCallTrackers(callId);

    // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    this.activeCalls.delete(callId);
    this.pendingAudio.delete(callId);
    this.conversationStages.delete(callId);
    this.recordingProcessing.delete(callId);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    try {
      await Call.findOneAndUpdate(
        { call_id: callId },
        {
          status: result,
          end_time: new Date(),
          duration_ms: duration,
          final_stage: callData.currentStage,
          error_message: error?.message || null,
        }
      );

      logger.info(`‚úÖ Call data saved to database for ${callId}`);
    } catch (dbError) {
      logger.error(`‚ùå Failed to save call data for ${callId}:`, dbError);
    }

    logger.info(`‚úÖ Call cleanup completed: ${callId}`);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ç—Ä–µ–∫–µ—Ä–æ–≤ –∑–≤–æ–Ω–∫–∞
   */
  cleanupCallTrackers(callId) {
    if (this.classificationTracker.has(callId)) {
      const finalStats = this.classificationTracker.get(callId);
      logger.info(
        `üìä Final classification stats for call ${callId}:`,
        finalStats
      );
      this.classificationTracker.delete(callId);
    }

    this.gptFailureCounter.delete(callId);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
   */
  async cleanupStaleCalls() {
    const now = Date.now();
    const maxCallDuration = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
    let cleanedCount = 0;

    for (const [callId, callData] of this.activeCalls.entries()) {
      if (now - callData.startTime > maxCallDuration) {
        logger.warn(`üßπ Cleaning up stale call: ${callId}`);
        await this.endCall(callId, 'timeout');
        cleanedCount++;
      }
    }

    return cleanedCount;
  }

  /**
   * –ù–∞–π—Ç–∏ callId –ø–æ Twilio SID
   */
  findCallIdByTwilioSid(twilioSid) {
    for (const [callId, callData] of this.activeCalls.entries()) {
      if (
        callData.twilioSid === twilioSid ||
        callData.twilioCallSid === twilioSid
      ) {
        logger.info(`‚úÖ Found callId from CallSid: ${callId} -> ${twilioSid}`);
        return callId;
      }
    }

    logger.warn(`‚ö†Ô∏è CallId not found for Twilio SID: ${twilioSid}`);
    return null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞ –ø–æ callId
   */
  getCallData(callId) {
    return this.activeCalls.get(callId);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞ –ø–æ Twilio SID
   */
  getCallDataByTwilioSid(twilioSid) {
    const callId = this.findCallIdByTwilioSid(twilioSid);
    return callId ? this.activeCalls.get(callId) : null;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Redirect TwiML (–¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è TTS)
   */
  generateRedirectTwiML(callId) {
    const baseUrl =
      TWILIO_CONFIG.serverUrl ||
      CONFIG.SERVER_URL ||
      `http://localhost:${CONFIG.PORT || 3000}`;

    const twiml = `<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Pause length="2"/>
    <Redirect method="POST">${baseUrl}/api/webhooks/twiml</Redirect>
</Response>`;

    logger.info(`üîÑ Generating Redirect TwiML for call: ${callId}`);
    return twiml;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞ (–¥–ª—è webhooks)
   */
  async handleCallStatus(callId, status, data = {}) {
    const callData = this.activeCalls.get(callId);

    if (!callData) {
      logger.warn(`Call data not found for status update: ${callId}`);
      return;
    }

    switch (status) {
      case 'initiated':
        await this.updateCallStatus(callId, 'initiated');
        logger.info(`üìû Call initiated: ${callId}`);
        break;

      case 'ringing':
        await this.updateCallStatus(callId, 'ringing');
        logger.info(`üìû Call ringing: ${callId}`);
        break;

      case 'in-progress':
      case 'answered':
        await this.updateCallStatus(callId, 'answered');
        logger.info(`üìû Call in progress: ${callId}`);
        break;

      case 'completed':
        const duration = data.duration || 0;
        const sipCode = data.sipCode || '200';

        logger.info(`üìû Call status update: ${callId} - ${status}`, {
          callSid: data.callSid,
          duration,
          sipCode,
        });

        await this.endCall(callId, 'completed');
        logger.info(`üìû Call ended: ${callId} with status: ${status}`);
        break;

      default:
        logger.info(`üìû Call status update: ${callId} - ${status}`);
        await this.updateCallStatus(callId, status, data);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –∏–∑ webhook
   */
  async handleRecordingReceived(
    callId,
    recordingUrl,
    recordingDuration,
    digits = null
  ) {
    logger.info(`üé§ Recording received for call: ${callId}`, {
      url: recordingUrl,
      duration: recordingDuration,
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ hang up
    if (digits === 'hangup') {
      logger.info(`üìû Call hung up during recording: ${callId}`);
      await this.endCall(callId, 'completed');
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å
    return await this.processRecording(callId, recordingUrl, recordingDuration);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏
   */
  async handleRecordingStatus(callId, status, data = {}) {
    logger.info(`üé§ Recording status update: ${callId} - ${status}`, {
      recordingSid: data.recordingSid,
      url: data.url,
    });

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–ø–∏—Å–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
   */
  getActiveCalls() {
    const calls = [];
    for (const [callId, callData] of this.activeCalls.entries()) {
      calls.push({
        callId,
        twilioSid: callData.twilioSid || callData.twilioCallSid,
        status: callData.status,
        clientId: callData.clientId,
        currentStage: callData.currentStage,
        startTime: callData.startTime,
        duration: Date.now() - callData.startTime,
      });
    }
    return calls;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–≤–æ–Ω–∫–æ–≤
   */
  getCallStatistics() {
    const stats = {
      active: this.activeCalls.size,
      processing: this.recordingProcessing.size,
      pendingAudio: this.pendingAudio.size,
      classifications: {},
      stages: {},
    };

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —ç—Ç–∞–ø–∞–º –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è–º
    for (const [callId, callData] of this.activeCalls.entries()) {
      const stage = callData.currentStage || 'unknown';
      stats.stages[stage] = (stats.stages[stage] || 0) + 1;
    }

    for (const [callId, tracker] of this.classificationTracker.entries()) {
      for (const [classification, count] of Object.entries(tracker)) {
        stats.classifications[classification] =
          (stats.classifications[classification] || 0) + count;
      }
    }

    return stats;
  }

  isRecordingProcessing(callId) {
    return this.recordingProcessing.has(callId);
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏
  setRecordingProcessing(callId, processing = true) {
    if (processing) {
      this.recordingProcessing.set(callId, true);
      logger.info(`üé§ Marked recording as processing for call: ${callId}`);
    } else {
      this.recordingProcessing.delete(callId);
      logger.info(`‚úÖ Removed processing marker for call: ${callId}`);
    }
  }

  /**
   * Test method to verify the manager is working
   */
  test() {
    logger.info('‚úÖ OutboundManager test method called');
    return {
      status: 'working',
      activeCalls: this.activeCalls.size,
      pendingAudio: this.pendingAudio.size,
      timestamp: new Date().toISOString(),
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const outboundManager = new OutboundManager();

logger.info('‚úÖ OutboundManager instance created and exported');
