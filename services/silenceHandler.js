// services/silenceHandler.js
import { logger } from '../utils/logger.js';
import { ttsManager } from './ttsManager.js';
import { outboundManager } from './outboundManager.js';

/**
 * üîá –û–ë–†–ê–ë–û–¢–ß–ò–ö –ú–û–õ–ß–ê–ù–ò–Ø –ò –¢–ò–®–ò–ù–´
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–æ–ª—á–∞–Ω–∏—è
 */
export class SilenceHandler {
  constructor() {
    // üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–û–õ–ß–ê–ù–ò–Ø
    this.silenceStats = new Map(); // callId -> silence events

    // üé≠ –¢–ò–ü–´ –ú–û–õ–ß–ê–ù–ò–Ø
    this.SILENCE_TYPES = {
      WHISPER_HALLUCINATION: 'hallucination',
      REAL_SILENCE: 'silence',
      THINKING_PAUSE: 'thinking',
      TECHNICAL_ISSUE: 'technical',
      USER_LEFT: 'abandoned',
    };

    // ‚è±Ô∏è –ü–û–†–û–ì–ò –í–†–ï–ú–ï–ù–ò
    this.TIMING_THRESHOLDS = {
      SHORT_PAUSE: 3, // —Å–µ–∫—É–Ω–¥ - –æ–±—ã—á–Ω–∞—è –ø–∞—É–∑–∞
      MEDIUM_PAUSE: 8, // —Å–µ–∫—É–Ω–¥ - —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
      LONG_PAUSE: 15, // —Å–µ–∫—É–Ω–¥ - –≤–æ–∑–º–æ–∂–Ω–æ —É—à–µ–ª
      ABANDON_THRESHOLD: 25, // —Å–µ–∫—É–Ω–¥ - —Ç–æ—á–Ω–æ —É—à–µ–ª
    };

    // üó£Ô∏è –®–ê–ë–õ–û–ù–´ –û–¢–í–ï–¢–û–í –ù–ê –ú–û–õ–ß–ê–ù–ò–ï
    this.SILENCE_RESPONSES = {
      first_silence: [
        '–ê–ª–ª–æ? –í—ã –º–µ–Ω—è —Å–ª—ã—à–∏—Ç–µ?',
        '–ù–µ –º–æ–≥—É –≤–∞—Å —Ä–∞—Å—Å–ª—ã—à–∞—Ç—å. –ì–æ–≤–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≥—Ä–æ–º—á–µ.',
        '–°–≤—è–∑—å –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.',
      ],
      repeated_silence: [
        '–ü–æ—Ö–æ–∂–µ, —Å–≤—è–∑—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è. –Ø –ø–æ–¥–æ–∂–¥—É –Ω–µ–º–Ω–æ–≥–æ.',
        '–ï—Å–ª–∏ –≤—ã —Ç–∞–º, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º.',
        '–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –ø–æ–∑–∂–µ –¥–ª—è –ª—É—á—à–µ–π —Å–≤—è–∑–∏.',
      ],
      thinking_pause: [
        '–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è –ø–æ–¥—É–º–∞—Ç—å. –Ø –ø–æ–¥–æ–∂–¥—É.',
        '–ù–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å —Å –æ—Ç–≤–µ—Ç–æ–º, —É –Ω–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è.',
        '–û–±–¥—É–º–∞–π—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, —ç—Ç–æ –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.',
      ],
      final_warning: [
        '–ï—Å–ª–∏ –Ω–µ —É—Å–ª—ã—à—É –æ—Ç–≤–µ—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–∏–µ —Å–µ–∫—É–Ω–¥—ã, –∑–∞–≤–µ—Ä—à—É –∑–≤–æ–Ω–æ–∫.',
        '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Å–ø—Ä–∞—à–∏–≤–∞—é - –≤—ã –≥–æ—Ç–æ–≤—ã –æ–±—Å—É–¥–∏—Ç—å –≤–æ–ø—Ä–æ—Å?',
        '–ó–∞–∫–∞–Ω—á–∏–≤–∞—é —Ä–∞–∑–≥–æ–≤–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞.',
      ],
    };

    logger.info('üîá SilenceHandler initialized');
  }

  /**
   * üéØ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ú–û–õ–ß–ê–ù–ò–Ø
   * @param {string} callId - ID –∑–≤–æ–Ω–∫–∞
   * @param {Object} context - –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–ª—á–∞–Ω–∏—è
   * @returns {Object} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  async handleSilence(callId, context = {}) {
    const {
      transcription = '',
      audioSize = 0,
      duration = 0,
      currentStage = 'unknown',
      conversationHistory = [],
      silenceType = this.SILENCE_TYPES.REAL_SILENCE,
    } = context;

    // üìä –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£
    this.updateSilenceStats(callId, silenceType, duration);

    // üîç –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –¢–ò–ü –ú–û–õ–ß–ê–ù–ò–Ø
    const silenceAnalysis = this.analyzeSilenceContext(callId, context);

    // üé≠ –í–´–ë–ò–†–ê–ï–ú –°–¢–†–ê–¢–ï–ì–ò–Æ –û–¢–í–ï–¢–ê
    const responseStrategy = this.determineResponseStrategy(
      callId,
      silenceAnalysis
    );

    // üó£Ô∏è –ì–ï–ù–ï–†–ò–†–£–ï–ú –û–¢–í–ï–¢
    const response = await this.generateSilenceResponse(
      callId,
      responseStrategy,
      silenceAnalysis
    );

    // üìù –õ–û–ì–ò–†–£–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢
    this.logSilenceHandling(
      callId,
      silenceAnalysis,
      responseStrategy,
      response
    );

    return {
      success: true,
      response: response.text,
      nextStage: response.nextStage,
      silenceType: silenceAnalysis.type,
      strategy: responseStrategy.name,
      shouldContinue: response.shouldContinue,
      metadata: {
        silenceCount: this.getSilenceCount(callId),
        totalSilenceDuration: this.getTotalSilenceDuration(callId),
        analysis: silenceAnalysis,
      },
    };
  }

  /**
   * üîç –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ö–°–¢–ê –ú–û–õ–ß–ê–ù–ò–Ø
   */
  analyzeSilenceContext(callId, context) {
    const { duration, currentStage, conversationHistory, silenceType } =
      context;
    const silenceCount = this.getSilenceCount(callId);
    const totalSilenceDuration = this.getTotalSilenceDuration(callId);

    const analysis = {
      type: silenceType,
      severity: 'low',
      duration,
      count: silenceCount,
      totalDuration: totalSilenceDuration,
      stage: currentStage,
      conversationLength: conversationHistory.length,
      indicators: [],
    };

    // üìè –û–ü–†–ï–î–ï–õ–Ø–ï–ú –°–ï–†–¨–ï–ó–ù–û–°–¢–¨
    if (duration <= this.TIMING_THRESHOLDS.SHORT_PAUSE) {
      analysis.severity = 'low';
      analysis.indicators.push('Short pause - normal');
    } else if (duration <= this.TIMING_THRESHOLDS.MEDIUM_PAUSE) {
      analysis.severity = 'medium';
      analysis.indicators.push('Medium pause - might be thinking');
    } else if (duration <= this.TIMING_THRESHOLDS.LONG_PAUSE) {
      analysis.severity = 'high';
      analysis.indicators.push('Long pause - possible issue');
    } else {
      analysis.severity = 'critical';
      analysis.indicators.push('Very long pause - likely abandoned');
    }

    // üî¢ –ê–ù–ê–õ–ò–ó –ö–û–õ–ò–ß–ï–°–¢–í–ê –ú–û–õ–ß–ê–ù–ò–ô
    if (silenceCount >= 3) {
      analysis.severity = 'high';
      analysis.indicators.push(`Multiple silences: ${silenceCount}`);
    }

    // ‚è±Ô∏è –ê–ù–ê–õ–ò–ó –û–ë–©–ï–ì–û –í–†–ï–ú–ï–ù–ò –ú–û–õ–ß–ê–ù–ò–Ø
    if (totalSilenceDuration > 30) {
      analysis.severity = 'critical';
      analysis.indicators.push(`Total silence time: ${totalSilenceDuration}s`);
    }

    // üé≠ –ê–ù–ê–õ–ò–ó –°–¢–ê–î–ò–ò –†–ê–ó–ì–û–í–û–†–ê
    if (currentStage === 'greeting_sent' && silenceCount === 1) {
      analysis.indicators.push('First interaction silence');
    } else if (currentStage === 'negotiation' && silenceCount >= 2) {
      analysis.indicators.push('Negotiation resistance silence');
    }

    return analysis;
  }

  /**
   * üéØ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ò –û–¢–í–ï–¢–ê
   */
  determineResponseStrategy(callId, analysis) {
    const { severity, count, type, stage, duration } = analysis;

    // üé≠ –°–¢–†–ê–¢–ï–ì–ò–Ø –î–õ–Ø –ì–ê–õ–õ–Æ–¶–ò–ù–ê–¶–ò–ô WHISPER
    if (type === this.SILENCE_TYPES.WHISPER_HALLUCINATION) {
      return {
        name: 'ignore_hallucination',
        action: 'continue_waiting',
        priority: 'low',
        timeout: 10,
        explanation: 'Whisper hallucination detected, continue normal flow',
      };
    }

    // ‚ö° –°–¢–†–ê–¢–ï–ì–ò–Ø –î–õ–Ø –ö–û–†–û–¢–ö–ò–• –ü–ê–£–ó
    if (severity === 'low' && count <= 2) {
      return {
        name: 'gentle_prompt',
        action: 'soft_reminder',
        priority: 'low',
        timeout: 8,
        explanation: 'Normal pause, gentle prompting',
      };
    }

    // ü§î –°–¢–†–ê–¢–ï–ì–ò–Ø –î–õ–Ø –†–ê–ó–ú–´–®–õ–ï–ù–ò–ô
    if (severity === 'medium' && stage === 'negotiation') {
      return {
        name: 'thinking_patience',
        action: 'patient_waiting',
        priority: 'medium',
        timeout: 12,
        explanation: 'Client might be considering options',
      };
    }

    // üö® –°–¢–†–ê–¢–ï–ì–ò–Ø –î–õ–Ø –ü–û–í–¢–û–†–ù–´–• –ú–û–õ–ß–ê–ù–ò–ô
    if (count >= 3 || severity === 'high') {
      return {
        name: 'escalated_attention',
        action: 'demand_response',
        priority: 'high',
        timeout: 15,
        explanation: 'Multiple silences, need active response',
      };
    }

    // ‚è∞ –°–¢–†–ê–¢–ï–ì–ò–Ø –î–õ–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –°–õ–£–ß–ê–ï–í
    if (
      severity === 'critical' ||
      duration > this.TIMING_THRESHOLDS.ABANDON_THRESHOLD
    ) {
      return {
        name: 'final_attempt',
        action: 'prepare_hangup',
        priority: 'critical',
        timeout: 10,
        explanation: 'Likely abandoned call, final attempt',
      };
    }

    // üîÑ –î–ï–§–û–õ–¢–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø
    return {
      name: 'standard_prompt',
      action: 'normal_prompt',
      priority: 'medium',
      timeout: 10,
      explanation: 'Standard silence handling',
    };
  }

  /**
   * üó£Ô∏è –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–í–ï–¢–ê –ù–ê –ú–û–õ–ß–ê–ù–ò–ï
   */
  async generateSilenceResponse(callId, strategy, analysis) {
    const { name, action, priority, timeout } = strategy;
    const { count, type, severity } = analysis;

    let responseText = '';
    let nextStage = 'listening';
    let shouldContinue = true;

    // üé≠ –ò–ì–ù–û–†–ò–†–û–í–ê–ù–ò–ï –ì–ê–õ–õ–Æ–¶–ò–ù–ê–¶–ò–ô
    if (name === 'ignore_hallucination') {
      // –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
      return {
        text: null,
        nextStage: 'listening',
        shouldContinue: true,
        audioGenerated: false,
      };
    }

    // üó£Ô∏è –í–´–ë–û–† –¢–ï–ö–°–¢–ê –û–¢–í–ï–¢–ê
    switch (action) {
      case 'soft_reminder':
        responseText = this.getRandomResponse('first_silence');
        nextStage = 'listening';
        break;

      case 'patient_waiting':
        responseText = this.getRandomResponse('thinking_pause');
        nextStage = 'waiting';
        break;

      case 'demand_response':
        responseText = this.getRandomResponse('repeated_silence');
        nextStage = 'demanding_response';
        break;

      case 'prepare_hangup':
        responseText = this.getRandomResponse('final_warning');
        nextStage = 'final_warning';
        shouldContinue = false;
        break;

      default:
        responseText = '–ê–ª–ª–æ? –í—ã –º–µ–Ω—è —Å–ª—ã—à–∏—Ç–µ?';
        nextStage = 'listening';
    }

    // üéµ –ì–ï–ù–ï–†–ò–†–£–ï–ú –ê–£–î–ò–û (–¢–û–õ–¨–ö–û –ï–°–õ–ò –ï–°–¢–¨ –¢–ï–ö–°–¢)
    let audioGenerated = false;
    if (responseText) {
      try {
        const result = await ttsManager.synthesizeSpeech(responseText, {
          priority: priority === 'critical' ? 'urgent' : 'normal',
          voiceId: process.env.TTS_VOICE_ID,
          useCache: true,
        });

        if (result && (result.audioUrl || result.audioBuffer)) {
          let audioUrl = result.audioUrl;

          // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –Ω–µ—Ç URL, —Å–æ—Ö—Ä–∞–Ω—è–µ–º buffer –∫–∞–∫ —Ñ–∞–π–ª
          if (result.audioBuffer && !audioUrl) {
            const audioManager = (await import('./audioManager.js'))
              .audioManager;
            const audioFile = await audioManager.saveAudioFile(
              callId,
              result.audioBuffer,
              'silence_response'
            );
            audioUrl = audioFile.publicUrl;
          }

          outboundManager.pendingAudio.set(callId, {
            audioUrl: audioUrl,
            audioBuffer: result.audioBuffer,
            source: result.source,
            type: 'silence_response',
            timestamp: Date.now(),
            consumed: false,
          });

          logger.info(`üéµ Silence audio saved: ${audioUrl}`);
        }

        audioGenerated = true;
        logger.info(
          `üîá Generated silence response for ${callId}: "${responseText}"`
        );
      } catch (ttsError) {
        logger.warn(
          `‚ö†Ô∏è Failed to generate TTS for silence response ${callId}:`,
          ttsError.message
        );
        audioGenerated = false;
      }
    }

    return {
      text: responseText,
      nextStage,
      shouldContinue,
      audioGenerated,
      strategy: name,
      timeout,
    };
  }

  /**
   * üé≤ –ü–û–õ–£–ß–ï–ù–ò–ï –°–õ–£–ß–ê–ô–ù–û–ì–û –û–¢–í–ï–¢–ê
   */
  getRandomResponse(category) {
    const responses = this.SILENCE_RESPONSES[category];
    if (!responses || responses.length === 0) {
      return '–ê–ª–ª–æ? –í—ã –º–µ–Ω—è —Å–ª—ã—à–∏—Ç–µ?';
    }

    const randomIndex = Math.floor(Math.random() * responses.length);
    return responses[randomIndex];
  }

  /**
   * üìä –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–û–ô
   */
  updateSilenceStats(callId, silenceType, duration) {
    if (!this.silenceStats.has(callId)) {
      this.silenceStats.set(callId, {
        events: [],
        totalDuration: 0,
        count: 0,
        types: {},
      });
    }

    const stats = this.silenceStats.get(callId);
    stats.events.push({
      type: silenceType,
      duration,
      timestamp: Date.now(),
    });
    stats.totalDuration += duration;
    stats.count++;
    stats.types[silenceType] = (stats.types[silenceType] || 0) + 1;
  }

  getSilenceCount(callId) {
    return this.silenceStats.get(callId)?.count || 0;
  }

  getTotalSilenceDuration(callId) {
    return this.silenceStats.get(callId)?.totalDuration || 0;
  }

  /**
   * üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –ú–û–õ–ß–ê–ù–ò–Ø
   */
  logSilenceHandling(callId, analysis, strategy, response) {
    const emoji =
      {
        low: 'üîá',
        medium: 'ü§î',
        high: '‚ö†Ô∏è',
        critical: 'üö®',
      }[analysis.severity] || 'üîá';

    logger.info(`${emoji} Silence handled for call ${callId}:`, {
      silenceType: analysis.type,
      severity: analysis.severity,
      duration: `${analysis.duration}s`,
      count: analysis.count,
      strategy: strategy.name,
      action: strategy.action,
      response: response.text
        ? response.text.substring(0, 50) + '...'
        : 'No audio response',
      shouldContinue: response.shouldContinue,
      audioGenerated: response.audioGenerated,
      nextStage: response.nextStage,
    });
  }

  /**
   * üßπ –û–ß–ò–°–¢–ö–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ó–ê–í–ï–†–®–ï–ù–ù–û–ì–û –ó–í–û–ù–ö–ê
   */
  cleanupCallStats(callId) {
    const stats = this.silenceStats.get(callId);
    if (stats) {
      logger.info(`üìä Final silence stats for call ${callId}:`, {
        totalEvents: stats.count,
        totalDuration: `${stats.totalDuration}s`,
        typeBreakdown: stats.types,
      });
      this.silenceStats.delete(callId);
    }
  }

  /**
   * üìà –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
   */
  getGlobalStats() {
    const allStats = Array.from(this.silenceStats.values());
    const totalCalls = allStats.length;

    if (totalCalls === 0) {
      return {
        activeCalls: 0,
        totalSilenceEvents: 0,
        averageSilencePerCall: 0,
        mostCommonType: 'none',
      };
    }

    const totalEvents = allStats.reduce((sum, stats) => sum + stats.count, 0);
    const allTypes = {};

    allStats.forEach((stats) => {
      Object.entries(stats.types).forEach(([type, count]) => {
        allTypes[type] = (allTypes[type] || 0) + count;
      });
    });

    const mostCommonType =
      Object.entries(allTypes).sort(([, a], [, b]) => b - a)[0]?.[0] || 'none';

    return {
      activeCalls: totalCalls,
      totalSilenceEvents: totalEvents,
      averageSilencePerCall: Math.round((totalEvents / totalCalls) * 10) / 10,
      mostCommonType,
      typeBreakdown: allTypes,
    };
  }

  /**
   * üéØ –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê - –ù–£–ñ–ù–û –õ–ò –†–ï–ê–ì–ò–†–û–í–ê–¢–¨ –ù–ê –ú–û–õ–ß–ê–ù–ò–ï
   */
  shouldRespondToSilence(callId, silenceType, duration) {
    // –ì–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏ Whisper - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if (silenceType === this.SILENCE_TYPES.WHISPER_HALLUCINATION) {
      return {
        should: false,
        reason: 'Whisper hallucination - ignore',
      };
    }

    // –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–∞—É–∑—ã - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if (duration < 2) {
      return {
        should: false,
        reason: 'Too short to be meaningful silence',
      };
    }

    // –ü–µ—Ä–≤–∞—è –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ - –º—è–≥–∫–æ —Ä–µ–∞–≥–∏—Ä—É–µ–º
    const silenceCount = this.getSilenceCount(callId);
    if (silenceCount === 0 && duration < this.TIMING_THRESHOLDS.MEDIUM_PAUSE) {
      return {
        should: true,
        reason: 'First normal silence - gentle response needed',
      };
    }

    // –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–µ –º–æ–ª—á–∞–Ω–∏—è - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–µ–º
    if (silenceCount > 0 || duration >= this.TIMING_THRESHOLDS.MEDIUM_PAUSE) {
      return {
        should: true,
        reason: 'Repeated or long silence - response required',
      };
    }

    return {
      should: true,
      reason: 'Default - better to respond',
    };
  }

  /**
   * üîÑ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –û–°–ù–û–í–ù–´–ú PIPELINE
   */
  async integrateWithPipeline(callId, whisperResult, audioSize, duration) {
    const { isHallucination, isSilence, transcription } = whisperResult;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–æ–ª—á–∞–Ω–∏—è
    let silenceType;
    if (isHallucination) {
      silenceType = this.SILENCE_TYPES.WHISPER_HALLUCINATION;
    } else if (isSilence) {
      silenceType = this.SILENCE_TYPES.REAL_SILENCE;
    } else {
      // –ù–µ –º–æ–ª—á–∞–Ω–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏
    const shouldRespond = this.shouldRespondToSilence(
      callId,
      silenceType,
      duration
    );

    if (!shouldRespond.should) {
      logger.info(`üîá Ignoring silence for ${callId}: ${shouldRespond.reason}`);
      this.updateSilenceStats(callId, silenceType, duration);
      return {
        action: 'ignore',
        reason: shouldRespond.reason,
        silenceType,
      };
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–æ–ª—á–∞–Ω–∏–µ
    const context = {
      transcription,
      audioSize,
      duration,
      silenceType,
      // –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ pipeline
      currentStage: 'unknown', // TODO: –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞–¥–∏—é
      conversationHistory: [], // TODO: –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
    };

    const result = await this.handleSilence(callId, context);

    return {
      action: 'respond',
      ...result,
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const silenceHandler = new SilenceHandler();
