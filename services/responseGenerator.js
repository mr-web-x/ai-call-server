import { AIServices } from './aiServices.js';
import { DebtCollectionScripts } from '../scripts/debtCollection.js';
import { PROMPT_TEMPLATES } from '../utils/promptTemplates.js';
import { logger } from '../utils/logger.js';
import { CONFIG } from '../config/index.js';

export class ResponseGenerator {
  constructor() {
    this.responseCache = new Map(); // –ö—ç—à –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π
    this.metrics = {
      gptUsage: 0,
      scriptUsage: 0,
      cacheHits: 0,
      failures: 0,
    };
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
   */
  async generateResponse(context) {
    const {
      callId,
      clientMessage,
      classification,
      conversationHistory,
      clientData,
      currentStage,
      repeatCount = 0,
    } = context;

    logger.info(`üéØ Generating response for call ${callId}:`, {
      classification,
      repeatCount,
      method: 'analyzing...',
    });

    try {
      // 1. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞
      const responseMethod = this.selectResponseMethod(context);

      logger.info(`üîÑ Selected method: ${responseMethod} for call ${callId}`);

      // 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
      let response;

      if (responseMethod === 'gpt') {
        response = await this.generateGPTResponse(context);
        this.metrics.gptUsage++;
      } else if (responseMethod === 'cache') {
        response = this.getCachedResponse(context);
        this.metrics.cacheHits++;
      } else {
        response = this.generateScriptResponse(context);
        this.metrics.scriptUsage++;
      }

      // 3. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
      const validatedResponse = this.validateResponse(response, context);

      // 4. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ—Ö–æ–∂–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π
      if (responseMethod === 'gpt' && validatedResponse.isValid) {
        this.cacheResponse(context, validatedResponse.text);
      }

      logger.info(`‚úÖ Response generated for call ${callId}:`, {
        method: responseMethod,
        length: validatedResponse.text.length,
        nextStage: validatedResponse.nextStage,
      });

      return {
        text: validatedResponse.text,
        nextStage: validatedResponse.nextStage,
        method: responseMethod,
        isValid: validatedResponse.isValid,
        metrics: this.getMetrics(),
      };
    } catch (error) {
      logger.error(`‚ùå Response generation failed for call ${callId}:`, error);
      this.metrics.failures++;

      // –§–æ–ª–±—ç–∫ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç
      return this.getFallbackResponse(context);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
   */
  selectResponseMethod(context) {
    const {
      classification,
      repeatCount,
      clientMessage,
      conversationHistory,
      currentStage,
    } = context;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π
    const cacheKey = this.generateCacheKey(context);
    if (this.responseCache.has(cacheKey)) {
      return 'cache';
    }

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ —Å–∫—Ä–∏–ø—Ç—ã
    if (this.isCriticalSituation(classification, clientMessage)) {
      return 'script';
    }

    // –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –±–æ–ª–µ–µ 2 —Ä–∞–∑ - –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    if (repeatCount >= 2) {
      return 'gpt';
    }

    // –ü–æ–ø—ã—Ç–∫–∏ —Å–º–µ–Ω—ã —Ç–µ–º—ã - GPT –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if (this.isOffTopicAttempt(clientMessage)) {
      return 'gpt';
    }

    // –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ/—Å–ª–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã - GPT
    if (this.isUnusualResponse(clientMessage, conversationHistory)) {
      return 'gpt';
    }

    // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è - GPT –¥–ª—è –¥–µ—ç—Å–∫–∞–ª–∞—Ü–∏–∏
    if (classification === 'aggressive' && repeatCount >= 1) {
      return 'gpt';
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–ª—É—á–∞–∏ - —Å–∫—Ä–∏–ø—Ç—ã (–±—ã—Å—Ç—Ä–µ–µ –∏ –Ω–∞–¥—ë–∂–Ω–µ–µ)
    return 'script';
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT
   */
  async generateGPTResponse(context) {
    const {
      callId,
      clientData,
      conversationHistory,
      classification,
      repeatCount,
    } = context;

    logger.info(`ü§ñ Generating GPT response for call ${callId}`);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT
    const prompt = PROMPT_TEMPLATES.buildResponsePrompt({
      ...context,
      systemRole: PROMPT_TEMPLATES.SYSTEM_ROLE,
      safetyRules: PROMPT_TEMPLATES.SAFETY_RULES,
    });

    // –í—ã–∑—ã–≤–∞–µ–º GPT —á–µ—Ä–µ–∑ AIServices
    const gptResponse = await AIServices.generateResponse(prompt, {
      maxTokens: CONFIG.GPT_MAX_RESPONSE_TOKENS || 100,
      temperature: 0.7,
    });

    return {
      text: gptResponse.text,
      nextStage: this.determineNextStage(classification, repeatCount),
      source: 'gpt',
      confidence: gptResponse.confidence || 0.8,
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤
   */
  generateScriptResponse(context) {
    const { classification, currentStage, clientData, repeatCount } = context;

    logger.info(
      `üìú Generating script response: ${classification} (attempt ${repeatCount + 1})`
    );

    // –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const responseVariants = DebtCollectionScripts.getResponseVariants(
      currentStage,
      classification,
      clientData
    );

    // –í—ã–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    const selectedResponse = this.selectResponseVariant(
      responseVariants,
      repeatCount
    );

    return {
      text: selectedResponse.text,
      nextStage: selectedResponse.nextStage,
      source: 'script',
      priority: selectedResponse.priority || 'normal',
    };
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
   */
  validateResponse(response, context) {
    const text = response.text || '';
    const { callId } = context;

    // –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const validationResults = {
      isValid: true,
      issues: [],
    };

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if (text.length > CONFIG.MAX_RESPONSE_LENGTH || 200) {
      validationResults.isValid = false;
      validationResults.issues.push('response_too_long');
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞/—Ç–µ–º—ã
    const forbiddenWords = ['–±–ª—è—Ç—å', '—Å—É–∫–∞', '—Ö—É–π', '–ø–∏–∑–¥–∞', '—É–±—å—é', '—É–≥—Ä–æ–∂–∞—é'];
    const hasForbiddenWords = forbiddenWords.some((word) =>
      text.toLowerCase().includes(word)
    );

    if (hasForbiddenWords) {
      validationResults.isValid = false;
      validationResults.issues.push('forbidden_words');
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–∏ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
    const offTopicKeywords = ['–ø–æ–≥–æ–¥–∞', '—Å–ø–æ—Ä—Ç', '–ø–æ–ª–∏—Ç–∏–∫–∞', '–Ω–æ–≤–æ—Å—Ç–∏'];
    const isOffTopic = offTopicKeywords.some((keyword) =>
      text.toLowerCase().includes(keyword)
    );

    if (isOffTopic) {
      validationResults.isValid = false;
      validationResults.issues.push('off_topic');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–ª–≥–µ/–∫–æ–º–ø–∞–Ω–∏–∏
    const hasDebtContext =
      /–¥–æ–ª–≥|–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å|–ø–æ–≥–∞—à–µ–Ω–∏–µ|–æ–ø–ª–∞—Ç–∞|—Ñ–∏–Ω–∞–Ω—Å|–∑–∞–π–º/.test(
        text.toLowerCase()
      );

    if (!hasDebtContext && text.length > 50) {
      validationResults.issues.push('lacks_debt_context');
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ –æ—Ç–º–µ—á–∞–µ–º
    }

    if (!validationResults.isValid) {
      logger.warn(`‚ö†Ô∏è Response validation failed for call ${callId}:`, {
        issues: validationResults.issues,
        text: text.substring(0, 100),
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–ª–±—ç–∫
      return {
        text: this.getFallbackPhrase(context.classification),
        nextStage: response.nextStage,
        isValid: false,
        validationIssues: validationResults.issues,
      };
    }

    return {
      text: response.text,
      nextStage: response.nextStage,
      isValid: true,
      source: response.source,
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   */
  determineNextStage(classification, repeatCount = 0) {
    // –õ–æ–≥–∏–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    if (repeatCount >= 3) {
      return classification === 'aggressive' ? 'final_warning' : 'escalation';
    }

    switch (classification) {
      case 'positive':
        return 'payment_discussion';
      case 'hang_up':
        return 'completed';
      case 'aggressive':
        return repeatCount >= 2 ? 'de_escalation' : 'listening';
      case 'negative':
        return 'negotiation';
      default:
        return 'listening';
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ —Å–∫—Ä–∏–ø—Ç—ã)
   */
  isCriticalSituation(classification, message) {
    const criticalKeywords = [
      '—Å—É–¥',
      '–ø–æ–ª–∏—Ü–∏—è',
      '–ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä–∞',
      '—é—Ä–∏—Å—Ç',
      '–∞–¥–≤–æ–∫–∞—Ç',
      '—É–≥—Ä–æ–∂–∞—é',
      '—É–±—å—é',
      '–Ω–∞–π–¥—É',
      '–ø—Ä–∏–µ–¥—É',
    ];

    return (
      criticalKeywords.some((keyword) =>
        message.toLowerCase().includes(keyword)
      ) || classification === 'threat'
    );
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–º–µ–Ω—ã —Ç–µ–º—ã
   */
  isOffTopicAttempt(message) {
    const offTopicPatterns = [
      /–∫–∞–∫ –¥–µ–ª–∞|–∫–∞–∫ –∂–∏–∑–Ω—å|—á—Ç–æ –Ω–æ–≤–æ–≥–æ/i,
      /–ø–æ–≥–æ–¥–∞|–¥–æ–∂–¥—å|—Å–æ–ª–Ω—Ü–µ|—Å–Ω–µ–≥/i,
      /—Ñ—É—Ç–±–æ–ª|—Ö–æ–∫–∫–µ–π|—Å–ø–æ—Ä—Ç/i,
      /–ø–æ–ª–∏—Ç–∏–∫–∞|–≤—ã–±–æ—Ä—ã|–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç/i,
      /–º–µ–Ω—è –∑–æ–≤—É—Ç|—è —Ä–∞–±–æ—Ç–∞—é|—É –º–µ–Ω—è/i,
    ];

    return offTopicPatterns.some((pattern) => pattern.test(message));
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
   */
  isUnusualResponse(message, conversationHistory) {
    // –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    if (message.length < 5 || message.length > 100) {
      return true;
    }

    // –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ñ—Ä–∞–∑ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    const isRepeating = conversationHistory
      .slice(-3)
      .some((turn) => turn.includes(message.substring(0, 20)));

    return isRepeating;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  generateCacheKey(context) {
    const { classification, repeatCount, currentStage } = context;
    return `${currentStage}_${classification}_${Math.min(repeatCount, 3)}`;
  }

  /**
   * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
   */
  cacheResponse(context, responseText) {
    const cacheKey = this.generateCacheKey(context);
    this.responseCache.set(cacheKey, {
      text: responseText,
      timestamp: Date.now(),
      usageCount: 0,
    });

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
    if (this.responseCache.size > 100) {
      const oldestKey = this.responseCache.keys().next().value;
      this.responseCache.delete(oldestKey);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
   */
  getCachedResponse(context) {
    const cacheKey = this.generateCacheKey(context);
    const cached = this.responseCache.get(cacheKey);

    if (cached) {
      cached.usageCount++;
      logger.info(`üíæ Using cached response for key: ${cacheKey}`);

      return {
        text: cached.text,
        nextStage: this.determineNextStage(
          context.classification,
          context.repeatCount
        ),
        source: 'cache',
      };
    }

    return null;
  }

  /**
   * –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤
   */
  selectResponseVariant(variants, repeatCount) {
    if (!variants || variants.length === 0) {
      return {
        text: '–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å? –Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª.',
        nextStage: 'listening',
        priority: 'normal',
      };
    }

    // –í—ã–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (—Ä–æ—Ç–∞—Ü–∏—è)
    const index = Math.min(repeatCount, variants.length - 1);
    return variants[index];
  }

  /**
   * –§–æ–ª–±—ç–∫ –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
   */
  getFallbackResponse(context) {
    const { classification } = context;

    return {
      text: this.getFallbackPhrase(classification),
      nextStage: 'listening',
      method: 'fallback',
      isValid: true,
      metrics: this.getMetrics(),
    };
  }

  /**
   * –ü—Ä–æ—Å—Ç—ã–µ —Ñ–æ–ª–±—ç–∫ —Ñ—Ä–∞–∑—ã
   */
  getFallbackPhrase(classification) {
    const fallbacks = {
      positive: ['–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –¥–µ—Ç–∞–ª–∏ –ø–æ–≥–∞—à–µ–Ω–∏—è.'],
      negative: ['–ü–æ–Ω–∏–º–∞—é –≤–∞—à–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ù–∞–π–¥—ë–º —Ä–µ—à–µ–Ω–∏–µ.'],
      aggressive: ['–ü—Ä–æ—à—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ. –†–µ—à–∏–º –≤–æ–ø—Ä–æ—Å –º–∏—Ä–Ω–æ.'],
      neutral: [
        '–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É –ø–æ–∑–∏—Ü–∏—é –ø–æ –¥–æ–ª–≥—É.',
        '–ö–∞–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ä–µ—à–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å—é?',
        '–ß—Ç–æ –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è?',
        '–î–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥—ë–º –≤–∑–∞–∏–º–æ–≤—ã–≥–æ–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.',
        '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –ø–æ –≤—ã–ø–ª–∞—Ç–µ.',
      ],
      hang_up: ['–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è.'],
    };

    const phrases = fallbacks[classification] || ['–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?'];

    // –†–æ—Ç–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
    const index = Math.floor(Date.now() / 30000) % phrases.length;
    return phrases[index];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  getMetrics() {
    return {
      ...this.metrics,
      cacheSize: this.responseCache.size,
      timestamp: Date.now(),
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞
   */
  cleanupCache() {
    const now = Date.now();
    const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

    for (const [key, value] of this.responseCache.entries()) {
      if (now - value.timestamp > maxAge) {
        this.responseCache.delete(key);
      }
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const responseGenerator = new ResponseGenerator();
