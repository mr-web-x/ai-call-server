// =================================================================
// üöÄ TWILIO MEDIA STREAMS INTEGRATION - –ü–û–õ–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
// =================================================================

// ‚úÖ 1. –ù–û–í–´–ô –°–ï–†–í–ò–°: services/mediaStreamManager.js
// =================================================================

import WebSocket from 'ws';
import { logger } from '../utils/logger.js';
import { EventEmitter } from 'events';
import { outboundManager } from './outboundManager.js';

export class MediaStreamManager extends EventEmitter {
  constructor() {
    super();
    this.activeStreams = new Map(); // callId -> streamData
    this.audioBuffers = new Map(); // callId -> buffer chunks
    this.vadThresholds = {
      silenceDuration: 1500, // 1.5 —Å–µ–∫—É–Ω–¥—ã —Ç–∏—à–∏–Ω—ã = –∫–æ–Ω–µ—Ü —Ñ—Ä–∞–∑—ã
      minSpeechDuration: 500, // –º–∏–Ω–∏–º—É–º 0.5 —Å–µ–∫ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–π —Ä–µ—á–∏
      energyThreshold: 0.01, // –ø–æ—Ä–æ–≥ —ç–Ω–µ—Ä–≥–∏–∏ –∑–≤—É–∫–∞
    };

    logger.info('üéôÔ∏è MediaStreamManager initialized');
  }

  /**
   * üéØ –°–û–ó–î–ê–ù–ò–ï WEBSOCKET –°–ï–†–í–ï–†–ê –¥–ª—è Media Streams
   */
  setupWebSocketServer(server) {
    this.wss = new WebSocket.Server({
      server,
      path: '/media-stream',
      verifyClient: (info) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç Twilio
        const userAgent = info.req.headers['user-agent'];
        return userAgent && userAgent.includes('TwilioProxy');
      },
    });

    this.wss.on('connection', (ws, req) => {
      logger.info('üîå New Media Stream connection from Twilio');

      let callId = null;
      let streamData = null;

      ws.on('message', async (message) => {
        try {
          const data = JSON.parse(message);
          await this.handleStreamMessage(callId, data, ws);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º callId –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
          if (!callId && data.event === 'start') {
            callId = data.streamSid; // –∏–ª–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ customParameters
            streamData = this.initializeStream(callId, ws);
          }
        } catch (error) {
          logger.error('‚ùå Stream message error:', error);
        }
      });

      ws.on('close', () => {
        if (callId) {
          logger.info(`üîå Media Stream closed for call: ${callId}`);
          this.cleanupStream(callId);
        }
      });

      ws.on('error', (error) => {
        logger.error('‚ùå WebSocket error:', error);
      });
    });

    logger.info('üéôÔ∏è Media Stream WebSocket server setup complete');
  }

  /**
   * üéØ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–¢–û–ö–ê –¥–ª—è –∑–≤–æ–Ω–∫–∞
   */
  initializeStream(callId, ws) {
    const streamData = {
      callId,
      ws,
      startTime: Date.now(),
      lastAudioTime: Date.now(),
      silenceStart: null,
      isCollectingAudio: false,
      currentPhrase: [],
      sequenceNumber: 0,
    };

    this.activeStreams.set(callId, streamData);
    this.audioBuffers.set(callId, []);

    logger.info(`üéôÔ∏è Stream initialized for call: ${callId}`);
    return streamData;
  }

  /**
   * üéØ –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –æ—Ç Twilio Media Stream
   */
  async handleStreamMessage(callId, data, ws) {
    switch (data.event) {
      case 'start':
        logger.info('üéôÔ∏è Stream started:', data.start);
        // Twilio –Ω–∞—á–∞–ª —Å—Ç—Ä–∏–º
        break;

      case 'media':
        await this.handleAudioChunk(callId, data.media);
        break;

      case 'stop':
        logger.info('üéôÔ∏è Stream stopped for call:', callId);
        this.cleanupStream(callId);
        break;
    }
  }

  /**
   * üéØ –û–ë–†–ê–ë–û–¢–ö–ê –ê–£–î–ò–û CHUNK –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
   */
  async handleAudioChunk(callId, mediaData) {
    const streamData = this.activeStreams.get(callId);
    if (!streamData) return;

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º Œº-law –∞—É–¥–∏–æ
    const audioChunk = this.decodeULawAudio(mediaData.payload);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
    const buffer = this.audioBuffers.get(callId) || [];
    buffer.push({
      chunk: audioChunk,
      timestamp: Date.now(),
      sequence: mediaData.sequenceNumber,
    });

    // üéØ VAD - –î–ï–¢–ï–ö–¶–ò–Ø –ê–ö–¢–ò–í–ù–û–°–¢–ò –ì–û–õ–û–°–ê
    const energy = this.calculateAudioEnergy(audioChunk);
    const isSpeech = energy > this.vadThresholds.energyThreshold;

    if (isSpeech) {
      // –†–µ—á—å –∞–∫—Ç–∏–≤–Ω–∞
      streamData.lastAudioTime = Date.now();
      streamData.silenceStart = null;

      if (!streamData.isCollectingAudio) {
        logger.info(`üó£Ô∏è Speech started for call: ${callId}`);
        streamData.isCollectingAudio = true;
        streamData.currentPhrase = [];
      }

      streamData.currentPhrase.push({
        chunk: audioChunk,
        timestamp: Date.now(),
      });
    } else {
      // –¢–∏—à–∏–Ω–∞
      if (streamData.isCollectingAudio && !streamData.silenceStart) {
        streamData.silenceStart = Date.now();
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω–µ—Ü —Ñ—Ä–∞–∑—ã
      if (streamData.isCollectingAudio && streamData.silenceStart) {
        const silenceDuration = Date.now() - streamData.silenceStart;

        if (silenceDuration > this.vadThresholds.silenceDuration) {
          // –ö–æ–Ω–µ—Ü —Ñ—Ä–∞–∑—ã!
          await this.processPhraseComplete(callId);
        }
      }
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
    if (buffer.length > 1000) {
      buffer.splice(0, buffer.length - 1000);
    }
    this.audioBuffers.set(callId, buffer);
  }

  /**
   * üéØ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ù–û–ô –§–†–ê–ó–´
   */
  async processPhraseComplete(callId) {
    const streamData = this.activeStreams.get(callId);
    if (!streamData || !streamData.currentPhrase.length) return;

    const phraseAudio = streamData.currentPhrase;
    const duration =
      (phraseAudio[phraseAudio.length - 1].timestamp -
        phraseAudio[0].timestamp) /
      1000;

    logger.info(`üé§ Phrase complete for call: ${callId}`, {
      chunks: phraseAudio.length,
      duration: `${duration.toFixed(2)}s`,
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if (duration < this.vadThresholds.minSpeechDuration / 1000) {
      logger.info(`‚ö†Ô∏è Phrase too short, ignoring: ${duration}s`);
      this.resetPhraseCollection(callId);
      return;
    }

    // üöÄ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –§–†–ê–ó–£ –ù–ï–ú–ï–î–õ–ï–ù–ù–û
    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º chunks –≤ –µ–¥–∏–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
      const audioBuffer = this.combineAudioChunks(phraseAudio);

      // –ó–∞–ø—É—Å–∫–∞–µ–º STT + LLM + TTS –ø–∞–π–ø–ª–∞–π–Ω
      await this.processStreamingAudio(callId, audioBuffer, duration);
    } catch (error) {
      logger.error(`‚ùå Phrase processing error for ${callId}:`, error);
    }

    this.resetPhraseCollection(callId);
  }

  /**
   * üéØ –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–¢–û–ö–û–í–û–ì–û –ê–£–î–ò–û (–∑–∞–º–µ–Ω–∞ processRecording)
   */
  async processStreamingAudio(callId, audioBuffer, duration) {
    const startTime = Date.now();

    try {
      // 1. STT - Whisper –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
      const transcription = await this.streamingSTT(audioBuffer);

      if (!transcription || transcription.trim().length < 3) {
        logger.info(`ü§´ Empty transcription for call: ${callId}`);
        return;
      }

      logger.info(
        `üé§ Transcribed (${Date.now() - startTime}ms): "${transcription}"`
      );

      // 2. LLM - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –æ—Ç–≤–µ—Ç
      const llmStart = Date.now();
      const response = await outboundManager.processTranscriptionStreaming(
        callId,
        transcription
      );

      logger.info(
        `üß† LLM response (${Date.now() - llmStart}ms): "${response.text}"`
      );

      // 3. TTS - –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å LLM –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
      if (response.text) {
        const ttsStart = Date.now();
        await outboundManager.generateResponseTTS(
          callId,
          response.text,
          response.emotion || 'neutral'
        );

        logger.info(`üîä TTS generated (${Date.now() - ttsStart}ms)`);
      }

      const totalTime = Date.now() - startTime;
      logger.info(`‚ö° Total streaming processing: ${totalTime}ms`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ-–æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Twilio
      await this.sendStreamingResponse(callId);
    } catch (error) {
      logger.error(`‚ùå Streaming processing error for ${callId}:`, error);
    }
  }

  /**
   * üéØ –ü–û–¢–û–ö–û–í–´–ô STT —á–µ—Ä–µ–∑ Whisper
   */
  async streamingSTT(audioBuffer) {
    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Whisper
      const wavBuffer = this.convertToWav(audioBuffer);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Whisper API
      const transcription = await outboundManager.transcribeAudio(wavBuffer);
      return transcription;
    } catch (error) {
      logger.error('‚ùå Streaming STT error:', error);
      return null;
    }
  }

  /**
   * üéØ –û–¢–ü–†–ê–í–ö–ê –û–¢–í–ï–¢–ê —á–µ—Ä–µ–∑ Media Stream
   */
  async sendStreamingResponse(callId) {
    const streamData = this.activeStreams.get(callId);
    if (!streamData) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ
    const audioData = outboundManager.pendingAudio.get(callId);
    if (audioData && audioData.audioUrl && !audioData.consumed) {
      // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ
      audioData.consumed = true;
      outboundManager.pendingAudio.set(callId, audioData);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É Twilio Play —á–µ—Ä–µ–∑ WebSocket
      const playCommand = {
        event: 'play',
        media: {
          url: audioData.audioUrl,
        },
      };

      streamData.ws.send(JSON.stringify(playCommand));
      logger.info(`üéµ Sent streaming audio response for call: ${callId}`);
    }
  }

  // =================================================================
  // üõ†Ô∏è –£–¢–ò–õ–ò–¢–´ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
  // =================================================================

  calculateAudioEnergy(audioChunk) {
    if (!audioChunk || audioChunk.length === 0) return 0;

    let sum = 0;
    for (let i = 0; i < audioChunk.length; i++) {
      sum += Math.abs(audioChunk[i]);
    }
    return sum / audioChunk.length / 32768; // –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è 16-bit
  }

  combineAudioChunks(phraseAudio) {
    const totalLength = phraseAudio.reduce(
      (sum, item) => sum + item.chunk.length,
      0
    );
    const combined = Buffer.alloc(totalLength);

    let offset = 0;
    phraseAudio.forEach((item) => {
      item.chunk.copy(combined, offset);
      offset += item.chunk.length;
    });

    return combined;
  }

  convertToWav(audioBuffer) {
    try {
      // üéØ –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø Œº-law PCM –≤ WAV –¥–ª—è Whisper

      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ –æ—Ç Twilio Media Streams
      const sampleRate = 8000; // 8 kHz
      const numChannels = 1; // –º–æ–Ω–æ
      const bitsPerSample = 16; // 16-bit –ø–æ—Å–ª–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Œº-law

      // –†–∞–∑–º–µ—Ä—ã –¥–ª—è WAV –∑–∞–≥–æ–ª–æ–≤–∫–∞
      const byteRate = (sampleRate * numChannels * bitsPerSample) / 8;
      const blockAlign = (numChannels * bitsPerSample) / 8;
      const dataSize = audioBuffer.length;
      const fileSize = 36 + dataSize;

      // –°–æ–∑–¥–∞–µ–º WAV –±—É—Ñ–µ—Ä —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
      const wavBuffer = Buffer.alloc(44 + dataSize);
      let offset = 0;

      // üéµ WAV –ó–ê–ì–û–õ–û–í–û–ö (44 –±–∞–π—Ç–∞)

      // RIFF –∑–∞–≥–æ–ª–æ–≤–æ–∫
      wavBuffer.write('RIFF', offset);
      offset += 4;
      wavBuffer.writeUInt32LE(fileSize, offset);
      offset += 4;
      wavBuffer.write('WAVE', offset);
      offset += 4;

      // fmt –ø–æ–¥—á–∞–Ω–∫
      wavBuffer.write('fmt ', offset);
      offset += 4;
      wavBuffer.writeUInt32LE(16, offset);
      offset += 4; // —Ä–∞–∑–º–µ—Ä fmt chunk
      wavBuffer.writeUInt16LE(1, offset);
      offset += 2; // –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç (1 = PCM)
      wavBuffer.writeUInt16LE(numChannels, offset);
      offset += 2;
      wavBuffer.writeUInt32LE(sampleRate, offset);
      offset += 4;
      wavBuffer.writeUInt32LE(byteRate, offset);
      offset += 4;
      wavBuffer.writeUInt16LE(blockAlign, offset);
      offset += 2;
      wavBuffer.writeUInt16LE(bitsPerSample, offset);
      offset += 2;

      // data –ø–æ–¥—á–∞–Ω–∫
      wavBuffer.write('data', offset);
      offset += 4;
      wavBuffer.writeUInt32LE(dataSize, offset);
      offset += 4;

      // üéµ –ö–û–ü–ò–†–£–ï–ú –ê–£–î–ò–û –î–ê–ù–ù–´–ï
      audioBuffer.copy(wavBuffer, offset);

      logger.debug(`üì¶ WAV conversion complete: ${wavBuffer.length} bytes`);
      return wavBuffer;
    } catch (error) {
      logger.error('‚ùå WAV conversion error:', error);
      // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –±—É—Ñ–µ—Ä
      return audioBuffer;
    }
  }

  /**
   * üéØ –£–õ–£–ß–®–ï–ù–ù–û–ï –î–ï–ö–û–î–ò–†–û–í–ê–ù–ò–ï Œº-law –≤ LINEAR PCM
   */
  decodeULawAudio(base64Payload) {
    try {
      const ulawBuffer = Buffer.from(base64Payload, 'base64');

      // –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è 16-bit linear PCM (–≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ)
      const linearBuffer = Buffer.alloc(ulawBuffer.length * 2);

      // üéµ Œº-law LOOKUP TABLE –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
      const ULAW_DECODE_TABLE = this.buildULawDecodeTable();

      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π Œº-law —Å–µ–º–ø–ª –≤ 16-bit linear
      for (let i = 0; i < ulawBuffer.length; i++) {
        const ulawByte = ulawBuffer[i];
        const linearValue = ULAW_DECODE_TABLE[ulawByte];

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ 16-bit little-endian
        linearBuffer.writeInt16LE(linearValue, i * 2);
      }

      logger.debug(
        `üéµ Œº-law decoded: ${ulawBuffer.length} -> ${linearBuffer.length} bytes`
      );
      return linearBuffer;
    } catch (error) {
      logger.error('‚ùå Œº-law decoding error:', error);
      return Buffer.from(base64Payload, 'base64'); // fallback
    }
  }

  /**
   * üéØ –ü–û–°–¢–†–û–ï–ù–ò–ï LOOKUP TABLE –¥–ª—è Œº-law –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  buildULawDecodeTable() {
    const table = new Array(256);

    for (let i = 0; i < 256; i++) {
      // Œº-law –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É ITU-T G.711
      let sign = i & 0x80 ? -1 : 1;
      let exponent = (i & 0x70) >> 4;
      let mantissa = i & 0x0f;

      let sample;
      if (exponent === 0) {
        sample = (mantissa << 2) + 33;
      } else {
        sample = ((mantissa << 1) + 33) << (exponent + 1);
      }

      table[i] = sign * (sample - 33);
    }

    return table;
  }

  resetPhraseCollection(callId) {
    const streamData = this.activeStreams.get(callId);
    if (streamData) {
      streamData.isCollectingAudio = false;
      streamData.silenceStart = null;
      streamData.currentPhrase = [];
    }
  }

  cleanupStream(callId) {
    this.activeStreams.delete(callId);
    this.audioBuffers.delete(callId);
    logger.info(`üßπ Stream cleanup complete for call: ${callId}`);
  }
}

// –°–æ–∑–¥–∞–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
export const mediaStreamManager = new MediaStreamManager();
